{"version":3,"file":"imask-7.1.3-80c1e5b4.js","sources":["../../src/vendor/imask-7.1.3.js"],"sourcesContent":["(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n    typeof define === 'function' && define.amd ? define(['exports'], factory) :\n      ((global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.IMask = {})));\n})(this, (function (exports) { 'use strict';\n\n  /** Checks if value is string */\n  function isString(str) {\n    return typeof str === 'string' || str instanceof String;\n  }\n\n  /** Checks if value is object */\n  function isObject(obj) {\n    var _obj$constructor;\n    return typeof obj === 'object' && obj != null && (obj == null || (_obj$constructor = obj.constructor) == null ? void 0 : _obj$constructor.name) === 'Object';\n  }\n  function pick(obj, keys) {\n    if (Array.isArray(keys)) return pick(obj, (_, k) => keys.includes(k));\n    return Object.entries(obj).reduce((acc, _ref) => {\n      let [k, v] = _ref;\n      if (keys(v, k)) acc[k] = v;\n      return acc;\n    }, {});\n  }\n\n  /** Direction */\n  const DIRECTION = {\n    NONE: 'NONE',\n    LEFT: 'LEFT',\n    FORCE_LEFT: 'FORCE_LEFT',\n    RIGHT: 'RIGHT',\n    FORCE_RIGHT: 'FORCE_RIGHT'\n  };\n\n  /** Direction */\n\n  function forceDirection(direction) {\n    switch (direction) {\n      case DIRECTION.LEFT:\n        return DIRECTION.FORCE_LEFT;\n      case DIRECTION.RIGHT:\n        return DIRECTION.FORCE_RIGHT;\n      default:\n        return direction;\n    }\n  }\n\n  /** Escapes regular expression control chars */\n  function escapeRegExp(str) {\n    return str.replace(/([.*+?^=!:${}()|[\\]/\\\\])/g, '\\\\$1');\n  }\n\n  // cloned from https://github.com/epoberezkin/fast-deep-equal with small changes\n  function objectIncludes(b, a) {\n    if (a === b) return true;\n    const arrA = Array.isArray(a),\n      arrB = Array.isArray(b);\n    let i;\n    if (arrA && arrB) {\n      if (a.length != b.length) return false;\n      for (i = 0; i < a.length; i++) if (!objectIncludes(a[i], b[i])) return false;\n      return true;\n    }\n    if (arrA != arrB) return false;\n    if (a && b && typeof a === 'object' && typeof b === 'object') {\n      const dateA = a instanceof Date,\n        dateB = b instanceof Date;\n      if (dateA && dateB) return a.getTime() == b.getTime();\n      if (dateA != dateB) return false;\n      const regexpA = a instanceof RegExp,\n        regexpB = b instanceof RegExp;\n      if (regexpA && regexpB) return a.toString() == b.toString();\n      if (regexpA != regexpB) return false;\n      const keys = Object.keys(a);\n      // if (keys.length !== Object.keys(b).length) return false;\n\n      for (i = 0; i < keys.length; i++) if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;\n      for (i = 0; i < keys.length; i++) if (!objectIncludes(b[keys[i]], a[keys[i]])) return false;\n      return true;\n    } else if (a && b && typeof a === 'function' && typeof b === 'function') {\n      return a.toString() === b.toString();\n    }\n    return false;\n  }\n\n  /** Selection range */\n\n  /** Provides details of changing input */\n  class ActionDetails {\n    /** Current input value */\n\n    /** Current cursor position */\n\n    /** Old input value */\n\n    /** Old selection */\n\n    constructor(opts) {\n      Object.assign(this, opts);\n\n      // double check if left part was changed (autofilling, other non-standard input triggers)\n      while (this.value.slice(0, this.startChangePos) !== this.oldValue.slice(0, this.startChangePos)) {\n        --this.oldSelection.start;\n      }\n    }\n\n    /** Start changing position */\n    get startChangePos() {\n      return Math.min(this.cursorPos, this.oldSelection.start);\n    }\n\n    /** Inserted symbols count */\n    get insertedCount() {\n      return this.cursorPos - this.startChangePos;\n    }\n\n    /** Inserted symbols */\n    get inserted() {\n      return this.value.substr(this.startChangePos, this.insertedCount);\n    }\n\n    /** Removed symbols count */\n    get removedCount() {\n      // Math.max for opposite operation\n      return Math.max(this.oldSelection.end - this.startChangePos ||\n        // for Delete\n        this.oldValue.length - this.value.length, 0);\n    }\n\n    /** Removed symbols */\n    get removed() {\n      return this.oldValue.substr(this.startChangePos, this.removedCount);\n    }\n\n    /** Unchanged head symbols */\n    get head() {\n      return this.value.substring(0, this.startChangePos);\n    }\n\n    /** Unchanged tail symbols */\n    get tail() {\n      return this.value.substring(this.startChangePos + this.insertedCount);\n    }\n\n    /** Remove direction */\n    get removeDirection() {\n      if (!this.removedCount || this.insertedCount) return DIRECTION.NONE;\n\n      // align right if delete at right\n      return (this.oldSelection.end === this.cursorPos || this.oldSelection.start === this.cursorPos) &&\n      // if not range removed (event with backspace)\n      this.oldSelection.end === this.oldSelection.start ? DIRECTION.RIGHT : DIRECTION.LEFT;\n    }\n  }\n\n  /** Applies mask on element */\n  function IMask(el, opts) {\n    // currently available only for input-like elements\n    return new IMask.InputMask(el, opts);\n  }\n\n  // TODO can't use overloads here because of https://github.com/microsoft/TypeScript/issues/50754\n  // export function maskedClass(mask: string): typeof MaskedPattern;\n  // export function maskedClass(mask: DateConstructor): typeof MaskedDate;\n  // export function maskedClass(mask: NumberConstructor): typeof MaskedNumber;\n  // export function maskedClass(mask: Array<any> | ArrayConstructor): typeof MaskedDynamic;\n  // export function maskedClass(mask: MaskedDate): typeof MaskedDate;\n  // export function maskedClass(mask: MaskedNumber): typeof MaskedNumber;\n  // export function maskedClass(mask: MaskedEnum): typeof MaskedEnum;\n  // export function maskedClass(mask: MaskedRange): typeof MaskedRange;\n  // export function maskedClass(mask: MaskedRegExp): typeof MaskedRegExp;\n  // export function maskedClass(mask: MaskedFunction): typeof MaskedFunction;\n  // export function maskedClass(mask: MaskedPattern): typeof MaskedPattern;\n  // export function maskedClass(mask: MaskedDynamic): typeof MaskedDynamic;\n  // export function maskedClass(mask: Masked): typeof Masked;\n  // export function maskedClass(mask: typeof Masked): typeof Masked;\n  // export function maskedClass(mask: typeof MaskedDate): typeof MaskedDate;\n  // export function maskedClass(mask: typeof MaskedNumber): typeof MaskedNumber;\n  // export function maskedClass(mask: typeof MaskedEnum): typeof MaskedEnum;\n  // export function maskedClass(mask: typeof MaskedRange): typeof MaskedRange;\n  // export function maskedClass(mask: typeof MaskedRegExp): typeof MaskedRegExp;\n  // export function maskedClass(mask: typeof MaskedFunction): typeof MaskedFunction;\n  // export function maskedClass(mask: typeof MaskedPattern): typeof MaskedPattern;\n  // export function maskedClass(mask: typeof MaskedDynamic): typeof MaskedDynamic;\n  // export function maskedClass<Mask extends typeof Masked> (mask: Mask): Mask;\n  // export function maskedClass(mask: RegExp): typeof MaskedRegExp;\n  // export function maskedClass(mask: (value: string, ...args: any[]) => boolean): typeof MaskedFunction;\n  /** Get Masked class by mask type */\n  function maskedClass(mask) /* TODO */{\n    if (mask == null) throw new Error('mask property should be defined');\n    if (mask instanceof RegExp) return IMask.MaskedRegExp;\n    if (isString(mask)) return IMask.MaskedPattern;\n    if (mask === Date) return IMask.MaskedDate;\n    if (mask === Number) return IMask.MaskedNumber;\n    if (Array.isArray(mask) || mask === Array) return IMask.MaskedDynamic;\n    if (IMask.Masked && mask.prototype instanceof IMask.Masked) return mask;\n    if (IMask.Masked && mask instanceof IMask.Masked) return mask.constructor;\n    if (mask instanceof Function) return IMask.MaskedFunction;\n    console.warn('Mask not found for mask', mask); // eslint-disable-line no-console\n    return IMask.Masked;\n  }\n  function normalizeOpts(opts) {\n    if (!opts) throw new Error('Options in not defined');\n    if (IMask.Masked) {\n      if (opts.prototype instanceof IMask.Masked) return {\n        mask: opts\n      };\n\n      /*\n        handle cases like:\n        1) opts = Masked\n        2) opts = { mask: Masked, ...instanceOpts }\n      */\n      const {\n        mask = undefined,\n        ...instanceOpts\n      } = opts instanceof IMask.Masked ? {\n        mask: opts\n      } : isObject(opts) && opts.mask instanceof IMask.Masked ? opts : {};\n      if (mask) {\n        const _mask = mask.mask;\n        return {\n          ...pick(mask, (_, k) => !k.startsWith('_')),\n          mask: mask.constructor,\n          _mask,\n          ...instanceOpts\n        };\n      }\n    }\n    if (!isObject(opts)) return {\n      mask: opts\n    };\n    return {\n      ...opts\n    };\n  }\n\n  // TODO can't use overloads here because of https://github.com/microsoft/TypeScript/issues/50754\n\n  // From masked\n  // export default function createMask<Opts extends Masked, ReturnMasked=Opts> (opts: Opts): ReturnMasked;\n  // // From masked class\n  // export default function createMask<Opts extends MaskedOptions<typeof Masked>, ReturnMasked extends Masked=InstanceType<Opts['mask']>> (opts: Opts): ReturnMasked;\n  // export default function createMask<Opts extends MaskedOptions<typeof MaskedDate>, ReturnMasked extends MaskedDate=MaskedDate<Opts['parent']>> (opts: Opts): ReturnMasked;\n  // export default function createMask<Opts extends MaskedOptions<typeof MaskedNumber>, ReturnMasked extends MaskedNumber=MaskedNumber<Opts['parent']>> (opts: Opts): ReturnMasked;\n  // export default function createMask<Opts extends MaskedOptions<typeof MaskedEnum>, ReturnMasked extends MaskedEnum=MaskedEnum<Opts['parent']>> (opts: Opts): ReturnMasked;\n  // export default function createMask<Opts extends MaskedOptions<typeof MaskedRange>, ReturnMasked extends MaskedRange=MaskedRange<Opts['parent']>> (opts: Opts): ReturnMasked;\n  // export default function createMask<Opts extends MaskedOptions<typeof MaskedRegExp>, ReturnMasked extends MaskedRegExp=MaskedRegExp<Opts['parent']>> (opts: Opts): ReturnMasked;\n  // export default function createMask<Opts extends MaskedOptions<typeof MaskedFunction>, ReturnMasked extends MaskedFunction=MaskedFunction<Opts['parent']>> (opts: Opts): ReturnMasked;\n  // export default function createMask<Opts extends MaskedOptions<typeof MaskedPattern>, ReturnMasked extends MaskedPattern=MaskedPattern<Opts['parent']>> (opts: Opts): ReturnMasked;\n  // export default function createMask<Opts extends MaskedOptions<typeof MaskedDynamic>, ReturnMasked extends MaskedDynamic=MaskedDynamic<Opts['parent']>> (opts: Opts): ReturnMasked;\n  // // From mask opts\n  // export default function createMask<Opts extends MaskedOptions<Masked>, ReturnMasked=Opts extends MaskedOptions<infer M> ? M : never> (opts: Opts): ReturnMasked;\n  // export default function createMask<Opts extends MaskedNumberOptions, ReturnMasked extends MaskedNumber=MaskedNumber<Opts['parent']>> (opts: Opts): ReturnMasked;\n  // export default function createMask<Opts extends MaskedDateFactoryOptions, ReturnMasked extends MaskedDate=MaskedDate<Opts['parent']>> (opts: Opts): ReturnMasked;\n  // export default function createMask<Opts extends MaskedEnumOptions, ReturnMasked extends MaskedEnum=MaskedEnum<Opts['parent']>> (opts: Opts): ReturnMasked;\n  // export default function createMask<Opts extends MaskedRangeOptions, ReturnMasked extends MaskedRange=MaskedRange<Opts['parent']>> (opts: Opts): ReturnMasked;\n  // export default function createMask<Opts extends MaskedPatternOptions, ReturnMasked extends MaskedPattern=MaskedPattern<Opts['parent']>> (opts: Opts): ReturnMasked;\n  // export default function createMask<Opts extends MaskedDynamicOptions, ReturnMasked extends MaskedDynamic=MaskedDynamic<Opts['parent']>> (opts: Opts): ReturnMasked;\n  // export default function createMask<Opts extends MaskedOptions<RegExp>, ReturnMasked extends MaskedRegExp=MaskedRegExp<Opts['parent']>> (opts: Opts): ReturnMasked;\n  // export default function createMask<Opts extends MaskedOptions<Function>, ReturnMasked extends MaskedFunction=MaskedFunction<Opts['parent']>> (opts: Opts): ReturnMasked;\n\n  /** Creates new {@link Masked} depending on mask type */\n  function createMask(opts) {\n    if (IMask.Masked && opts instanceof IMask.Masked) return opts;\n    const nOpts = normalizeOpts(opts);\n    const MaskedClass = maskedClass(nOpts.mask);\n    if (!MaskedClass) throw new Error('Masked class is not found for provided mask, appropriate module needs to be imported manually before creating mask.');\n    if (nOpts.mask === MaskedClass) delete nOpts.mask;\n    if (nOpts._mask) {\n      nOpts.mask = nOpts._mask;\n      delete nOpts._mask;\n    }\n    return new MaskedClass(nOpts);\n  }\n  IMask.createMask = createMask;\n\n  /**  Generic element API to use with mask */\n  class MaskElement {\n    /** */\n\n    /** */\n\n    /** */\n\n    /** Safely returns selection start */\n    get selectionStart() {\n      let start;\n      try {\n        start = this._unsafeSelectionStart;\n      } catch {}\n      return start != null ? start : this.value.length;\n    }\n\n    /** Safely returns selection end */\n    get selectionEnd() {\n      let end;\n      try {\n        end = this._unsafeSelectionEnd;\n      } catch {}\n      return end != null ? end : this.value.length;\n    }\n\n    /** Safely sets element selection */\n    select(start, end) {\n      if (start == null || end == null || start === this.selectionStart && end === this.selectionEnd) return;\n      try {\n        this._unsafeSelect(start, end);\n      } catch {}\n    }\n\n    /** */\n    get isActive() {\n      return false;\n    }\n    /** */\n\n    /** */\n\n    /** */\n  }\n\n  IMask.MaskElement = MaskElement;\n\n  /** Bridge between HTMLElement and {@link Masked} */\n  class HTMLMaskElement extends MaskElement {\n    /** HTMLElement to use mask on */\n\n    constructor(input) {\n      super();\n      this.input = input;\n      this._handlers = {};\n    }\n    get rootElement() {\n      var _this$input$getRootNo, _this$input$getRootNo2, _this$input;\n      return (_this$input$getRootNo = (_this$input$getRootNo2 = (_this$input = this.input).getRootNode) == null ? void 0 : _this$input$getRootNo2.call(_this$input)) != null ? _this$input$getRootNo : document;\n    }\n\n    /**\n     Is element in focus\n     */\n    get isActive() {\n      return this.input === this.rootElement.activeElement;\n    }\n\n    /**\n     Binds HTMLElement events to mask internal events\n     */\n    bindEvents(handlers) {\n      Object.keys(handlers).forEach(event => this._toggleEventHandler(HTMLMaskElement.EVENTS_MAP[event], handlers[event]));\n    }\n\n    /**\n     Unbinds HTMLElement events to mask internal events\n     */\n    unbindEvents() {\n      Object.keys(this._handlers).forEach(event => this._toggleEventHandler(event));\n    }\n    _toggleEventHandler(event, handler) {\n      if (this._handlers[event]) {\n        this.input.removeEventListener(event, this._handlers[event]);\n        delete this._handlers[event];\n      }\n      if (handler) {\n        this.input.addEventListener(event, handler);\n        this._handlers[event] = handler;\n      }\n    }\n  }\n  /** Mapping between HTMLElement events and mask internal events */\n  HTMLMaskElement.EVENTS_MAP = {\n    selectionChange: 'keydown',\n    input: 'input',\n    drop: 'drop',\n    click: 'click',\n    focus: 'focus',\n    commit: 'blur'\n  };\n  IMask.HTMLMaskElement = HTMLMaskElement;\n\n  /** Bridge between InputElement and {@link Masked} */\n  class HTMLInputMaskElement extends HTMLMaskElement {\n    /** InputElement to use mask on */\n\n    constructor(input) {\n      super(input);\n      this.input = input;\n      this._handlers = {};\n    }\n\n    /** Returns InputElement selection start */\n    get _unsafeSelectionStart() {\n      return this.input.selectionStart != null ? this.input.selectionStart : this.value.length;\n    }\n\n    /** Returns InputElement selection end */\n    get _unsafeSelectionEnd() {\n      return this.input.selectionEnd;\n    }\n\n    /** Sets InputElement selection */\n    _unsafeSelect(start, end) {\n      this.input.setSelectionRange(start, end);\n    }\n    get value() {\n      return this.input.value;\n    }\n    set value(value) {\n      this.input.value = value;\n    }\n  }\n  IMask.HTMLMaskElement = HTMLMaskElement;\n\n  class HTMLContenteditableMaskElement extends HTMLMaskElement {\n    /** Returns HTMLElement selection start */\n    get _unsafeSelectionStart() {\n      const root = this.rootElement;\n      const selection = root.getSelection && root.getSelection();\n      const anchorOffset = selection && selection.anchorOffset;\n      const focusOffset = selection && selection.focusOffset;\n      if (focusOffset == null || anchorOffset == null || anchorOffset < focusOffset) {\n        return anchorOffset;\n      }\n      return focusOffset;\n    }\n\n    /** Returns HTMLElement selection end */\n    get _unsafeSelectionEnd() {\n      const root = this.rootElement;\n      const selection = root.getSelection && root.getSelection();\n      const anchorOffset = selection && selection.anchorOffset;\n      const focusOffset = selection && selection.focusOffset;\n      if (focusOffset == null || anchorOffset == null || anchorOffset > focusOffset) {\n        return anchorOffset;\n      }\n      return focusOffset;\n    }\n\n    /** Sets HTMLElement selection */\n    _unsafeSelect(start, end) {\n      if (!this.rootElement.createRange) return;\n      const range = this.rootElement.createRange();\n      range.setStart(this.input.firstChild || this.input, start);\n      range.setEnd(this.input.lastChild || this.input, end);\n      const root = this.rootElement;\n      const selection = root.getSelection && root.getSelection();\n      if (selection) {\n        selection.removeAllRanges();\n        selection.addRange(range);\n      }\n    }\n\n    /** HTMLElement value */\n    get value() {\n      return this.input.textContent || '';\n    }\n    set value(value) {\n      this.input.textContent = value;\n    }\n  }\n  IMask.HTMLContenteditableMaskElement = HTMLContenteditableMaskElement;\n\n  /** Listens to element events and controls changes between element and {@link Masked} */\n  class InputMask {\n    /**\n     View element\n     */\n\n    /** Internal {@link Masked} model */\n\n    constructor(el, opts) {\n      this.el = el instanceof MaskElement ? el : el.isContentEditable && el.tagName !== 'INPUT' && el.tagName !== 'TEXTAREA' ? new HTMLContenteditableMaskElement(el) : new HTMLInputMaskElement(el);\n      this.masked = createMask(opts);\n      this._listeners = {};\n      this._value = '';\n      this._unmaskedValue = '';\n      this._saveSelection = this._saveSelection.bind(this);\n      this._onInput = this._onInput.bind(this);\n      this._onChange = this._onChange.bind(this);\n      this._onDrop = this._onDrop.bind(this);\n      this._onFocus = this._onFocus.bind(this);\n      this._onClick = this._onClick.bind(this);\n      this.alignCursor = this.alignCursor.bind(this);\n      this.alignCursorFriendly = this.alignCursorFriendly.bind(this);\n      this._bindEvents();\n\n      // refresh\n      this.updateValue();\n      this._onChange();\n    }\n    maskEquals(mask) {\n      var _this$masked;\n      return mask == null || ((_this$masked = this.masked) == null ? void 0 : _this$masked.maskEquals(mask));\n    }\n\n    /** Masked */\n    get mask() {\n      return this.masked.mask;\n    }\n    set mask(mask) {\n      if (this.maskEquals(mask)) return;\n      if (!(mask instanceof IMask.Masked) && this.masked.constructor === maskedClass(mask)) {\n        // TODO \"any\" no idea\n        this.masked.updateOptions({\n          mask\n        });\n        return;\n      }\n      const masked = mask instanceof IMask.Masked ? mask : createMask({\n        mask\n      });\n      masked.unmaskedValue = this.masked.unmaskedValue;\n      this.masked = masked;\n    }\n\n    /** Raw value */\n    get value() {\n      return this._value;\n    }\n    set value(str) {\n      if (this.value === str) return;\n      this.masked.value = str;\n      this.updateControl();\n      this.alignCursor();\n    }\n\n    /** Unmasked value */\n    get unmaskedValue() {\n      return this._unmaskedValue;\n    }\n    set unmaskedValue(str) {\n      if (this.unmaskedValue === str) return;\n      this.masked.unmaskedValue = str;\n      this.updateControl();\n      this.alignCursor();\n    }\n\n    /** Typed unmasked value */\n    get typedValue() {\n      return this.masked.typedValue;\n    }\n    set typedValue(val) {\n      if (this.masked.typedValueEquals(val)) return;\n      this.masked.typedValue = val;\n      this.updateControl();\n      this.alignCursor();\n    }\n\n    /** Display value */\n    get displayValue() {\n      return this.masked.displayValue;\n    }\n\n    /** Starts listening to element events */\n    _bindEvents() {\n      this.el.bindEvents({\n        selectionChange: this._saveSelection,\n        input: this._onInput,\n        drop: this._onDrop,\n        click: this._onClick,\n        focus: this._onFocus,\n        commit: this._onChange\n      });\n    }\n\n    /** Stops listening to element events */\n    _unbindEvents() {\n      if (this.el) this.el.unbindEvents();\n    }\n\n    /** Fires custom event */\n    _fireEvent(ev, e) {\n      const listeners = this._listeners[ev];\n      if (!listeners) return;\n      listeners.forEach(l => l(e));\n    }\n\n    /** Current selection start */\n    get selectionStart() {\n      return this._cursorChanging ? this._changingCursorPos : this.el.selectionStart;\n    }\n\n    /** Current cursor position */\n    get cursorPos() {\n      return this._cursorChanging ? this._changingCursorPos : this.el.selectionEnd;\n    }\n    set cursorPos(pos) {\n      if (!this.el || !this.el.isActive) return;\n      this.el.select(pos, pos);\n      this._saveSelection();\n    }\n\n    /** Stores current selection */\n    _saveSelection( /* ev */\n    ) {\n      if (this.displayValue !== this.el.value) {\n        console.warn('Element value was changed outside of mask. Syncronize mask using `mask.updateValue()` to work properly.'); // eslint-disable-line no-console\n      }\n\n      this._selection = {\n        start: this.selectionStart,\n        end: this.cursorPos\n      };\n    }\n\n    /** Syncronizes model value from view */\n    updateValue() {\n      this.masked.value = this.el.value;\n      this._value = this.masked.value;\n    }\n\n    /** Syncronizes view from model value, fires change events */\n    updateControl() {\n      const newUnmaskedValue = this.masked.unmaskedValue;\n      const newValue = this.masked.value;\n      const newDisplayValue = this.displayValue;\n      const isChanged = this.unmaskedValue !== newUnmaskedValue || this.value !== newValue;\n      this._unmaskedValue = newUnmaskedValue;\n      this._value = newValue;\n      if (this.el.value !== newDisplayValue) this.el.value = newDisplayValue;\n      if (isChanged) this._fireChangeEvents();\n    }\n\n    /** Updates options with deep equal check, recreates {@link Masked} model if mask type changes */\n    updateOptions(opts) {\n      const {\n        mask,\n        ...restOpts\n      } = opts;\n      const updateMask = !this.maskEquals(mask);\n      const updateOpts = !objectIncludes(this.masked, restOpts);\n      if (updateMask) this.mask = mask;\n      if (updateOpts) this.masked.updateOptions(restOpts); // TODO\n\n      if (updateMask || updateOpts) this.updateControl();\n    }\n\n    /** Updates cursor */\n    updateCursor(cursorPos) {\n      if (cursorPos == null) return;\n      this.cursorPos = cursorPos;\n\n      // also queue change cursor for mobile browsers\n      this._delayUpdateCursor(cursorPos);\n    }\n\n    /** Delays cursor update to support mobile browsers */\n    _delayUpdateCursor(cursorPos) {\n      this._abortUpdateCursor();\n      this._changingCursorPos = cursorPos;\n      this._cursorChanging = setTimeout(() => {\n        if (!this.el) return; // if was destroyed\n        this.cursorPos = this._changingCursorPos;\n        this._abortUpdateCursor();\n      }, 10);\n    }\n\n    /** Fires custom events */\n    _fireChangeEvents() {\n      this._fireEvent('accept', this._inputEvent);\n      if (this.masked.isComplete) this._fireEvent('complete', this._inputEvent);\n    }\n\n    /** Aborts delayed cursor update */\n    _abortUpdateCursor() {\n      if (this._cursorChanging) {\n        clearTimeout(this._cursorChanging);\n        delete this._cursorChanging;\n      }\n    }\n\n    /** Aligns cursor to nearest available position */\n    alignCursor() {\n      this.cursorPos = this.masked.nearestInputPos(this.masked.nearestInputPos(this.cursorPos, DIRECTION.LEFT));\n    }\n\n    /** Aligns cursor only if selection is empty */\n    alignCursorFriendly() {\n      if (this.selectionStart !== this.cursorPos) return; // skip if range is selected\n      this.alignCursor();\n    }\n\n    /** Adds listener on custom event */\n    on(ev, handler) {\n      if (!this._listeners[ev]) this._listeners[ev] = [];\n      this._listeners[ev].push(handler);\n      return this;\n    }\n\n    /** Removes custom event listener */\n    off(ev, handler) {\n      if (!this._listeners[ev]) return this;\n      if (!handler) {\n        delete this._listeners[ev];\n        return this;\n      }\n      const hIndex = this._listeners[ev].indexOf(handler);\n      if (hIndex >= 0) this._listeners[ev].splice(hIndex, 1);\n      return this;\n    }\n\n    /** Handles view input event */\n    _onInput(e) {\n      this._inputEvent = e;\n      this._abortUpdateCursor();\n\n      // fix strange IE behavior\n      if (!this._selection) return this.updateValue();\n      const details = new ActionDetails({\n        // new state\n        value: this.el.value,\n        cursorPos: this.cursorPos,\n        // old state\n        oldValue: this.displayValue,\n        oldSelection: this._selection\n      });\n      const oldRawValue = this.masked.rawInputValue;\n      const offset = this.masked.splice(details.startChangePos, details.removed.length, details.inserted, details.removeDirection, {\n        input: true,\n        raw: true\n      }).offset;\n\n      // force align in remove direction only if no input chars were removed\n      // otherwise we still need to align with NONE (to get out from fixed symbols for instance)\n      const removeDirection = oldRawValue === this.masked.rawInputValue ? details.removeDirection : DIRECTION.NONE;\n      let cursorPos = this.masked.nearestInputPos(details.startChangePos + offset, removeDirection);\n      if (removeDirection !== DIRECTION.NONE) cursorPos = this.masked.nearestInputPos(cursorPos, DIRECTION.NONE);\n      this.updateControl();\n      this.updateCursor(cursorPos);\n      delete this._inputEvent;\n    }\n\n    /** Handles view change event and commits model value */\n    _onChange() {\n      if (this.displayValue !== this.el.value) {\n        this.updateValue();\n      }\n      this.masked.doCommit();\n      this.updateControl();\n      this._saveSelection();\n    }\n\n    /** Handles view drop event, prevents by default */\n    _onDrop(ev) {\n      ev.preventDefault();\n      ev.stopPropagation();\n    }\n\n    /** Restore last selection on focus */\n    _onFocus(ev) {\n      this.alignCursorFriendly();\n    }\n\n    /** Restore last selection on focus */\n    _onClick(ev) {\n      this.alignCursorFriendly();\n    }\n\n    /** Unbind view events and removes element reference */\n    destroy() {\n      this._unbindEvents();\n      this._listeners.length = 0;\n      delete this.el;\n    }\n  }\n  IMask.InputMask = InputMask;\n\n  /** Provides details of changing model value */\n  class ChangeDetails {\n    /** Inserted symbols */\n\n    /** Can skip chars */\n\n    /** Additional offset if any changes occurred before tail */\n\n    /** Raw inserted is used by dynamic mask */\n\n    static normalize(prep) {\n      return Array.isArray(prep) ? prep : [prep, new ChangeDetails()];\n    }\n    constructor(details) {\n      Object.assign(this, {\n        inserted: '',\n        rawInserted: '',\n        skip: false,\n        tailShift: 0\n      }, details);\n    }\n\n    /** Aggregate changes */\n    aggregate(details) {\n      this.rawInserted += details.rawInserted;\n      this.skip = this.skip || details.skip;\n      this.inserted += details.inserted;\n      this.tailShift += details.tailShift;\n      return this;\n    }\n\n    /** Total offset considering all changes */\n    get offset() {\n      return this.tailShift + this.inserted.length;\n    }\n  }\n  IMask.ChangeDetails = ChangeDetails;\n\n  /** Provides details of continuous extracted tail */\n  class ContinuousTailDetails {\n    /** Tail value as string */\n\n    /** Tail start position */\n\n    /** Start position */\n\n    constructor(value, from, stop) {\n      if (value === void 0) {\n        value = '';\n      }\n      if (from === void 0) {\n        from = 0;\n      }\n      this.value = value;\n      this.from = from;\n      this.stop = stop;\n    }\n    toString() {\n      return this.value;\n    }\n    extend(tail) {\n      this.value += String(tail);\n    }\n    appendTo(masked) {\n      return masked.append(this.toString(), {\n        tail: true\n      }).aggregate(masked._appendPlaceholder());\n    }\n    get state() {\n      return {\n        value: this.value,\n        from: this.from,\n        stop: this.stop\n      };\n    }\n    set state(state) {\n      Object.assign(this, state);\n    }\n    unshift(beforePos) {\n      if (!this.value.length || beforePos != null && this.from >= beforePos) return '';\n      const shiftChar = this.value[0];\n      this.value = this.value.slice(1);\n      return shiftChar;\n    }\n    shift() {\n      if (!this.value.length) return '';\n      const shiftChar = this.value[this.value.length - 1];\n      this.value = this.value.slice(0, -1);\n      return shiftChar;\n    }\n  }\n\n  /** Append flags */\n\n  /** Extract flags */\n\n  // see https://github.com/microsoft/TypeScript/issues/6223\n\n  /** Provides common masking stuff */\n  class Masked {\n    /** */\n\n    /** */\n\n    /** Transforms value before mask processing */\n\n    /** Transforms each char before mask processing */\n\n    /** Validates if value is acceptable */\n\n    /** Does additional processing at the end of editing */\n\n    /** Format typed value to string */\n\n    /** Parse string to get typed value */\n\n    /** Enable characters overwriting */\n\n    /** */\n\n    /** */\n\n    /** */\n\n    constructor(opts) {\n      this._value = '';\n      this._update({\n        ...Masked.DEFAULTS,\n        ...opts\n      });\n      this._initialized = true;\n    }\n\n    /** Sets and applies new options */\n    updateOptions(opts) {\n      if (!Object.keys(opts).length) return;\n      this.withValueRefresh(this._update.bind(this, opts));\n    }\n\n    /** Sets new options */\n    _update(opts) {\n      Object.assign(this, opts);\n    }\n\n    /** Mask state */\n    get state() {\n      return {\n        _value: this.value,\n        _rawInputValue: this.rawInputValue\n      };\n    }\n    set state(state) {\n      this._value = state._value;\n    }\n\n    /** Resets value */\n    reset() {\n      this._value = '';\n    }\n    get value() {\n      return this._value;\n    }\n    set value(value) {\n      this.resolve(value, {\n        input: true\n      });\n    }\n\n    /** Resolve new value */\n    resolve(value, flags) {\n      if (flags === void 0) {\n        flags = {\n          input: true\n        };\n      }\n      this.reset();\n      this.append(value, flags, '');\n      this.doCommit();\n    }\n    get unmaskedValue() {\n      return this.value;\n    }\n    set unmaskedValue(value) {\n      this.resolve(value, {});\n    }\n    get typedValue() {\n      return this.parse ? this.parse(this.value, this) : this.unmaskedValue;\n    }\n    set typedValue(value) {\n      if (this.format) {\n        this.value = this.format(value, this);\n      } else {\n        this.unmaskedValue = String(value);\n      }\n    }\n\n    /** Value that includes raw user input */\n    get rawInputValue() {\n      return this.extractInput(0, this.displayValue.length, {\n        raw: true\n      });\n    }\n    set rawInputValue(value) {\n      this.resolve(value, {\n        raw: true\n      });\n    }\n    get displayValue() {\n      return this.value;\n    }\n    get isComplete() {\n      return true;\n    }\n    get isFilled() {\n      return this.isComplete;\n    }\n\n    /** Finds nearest input position in direction */\n    nearestInputPos(cursorPos, direction) {\n      return cursorPos;\n    }\n    totalInputPositions(fromPos, toPos) {\n      if (fromPos === void 0) {\n        fromPos = 0;\n      }\n      if (toPos === void 0) {\n        toPos = this.displayValue.length;\n      }\n      return Math.min(this.displayValue.length, toPos - fromPos);\n    }\n\n    /** Extracts value in range considering flags */\n    extractInput(fromPos, toPos, flags) {\n      if (fromPos === void 0) {\n        fromPos = 0;\n      }\n      if (toPos === void 0) {\n        toPos = this.displayValue.length;\n      }\n      return this.displayValue.slice(fromPos, toPos);\n    }\n\n    /** Extracts tail in range */\n    extractTail(fromPos, toPos) {\n      if (fromPos === void 0) {\n        fromPos = 0;\n      }\n      if (toPos === void 0) {\n        toPos = this.displayValue.length;\n      }\n      return new ContinuousTailDetails(this.extractInput(fromPos, toPos), fromPos);\n    }\n\n    /** Appends tail */\n    appendTail(tail) {\n      if (isString(tail)) tail = new ContinuousTailDetails(String(tail));\n      return tail.appendTo(this);\n    }\n\n    /** Appends char */\n    _appendCharRaw(ch, flags) {\n      if (!ch) return new ChangeDetails();\n      this._value += ch;\n      return new ChangeDetails({\n        inserted: ch,\n        rawInserted: ch\n      });\n    }\n\n    /** Appends char */\n    _appendChar(ch, flags, checkTail) {\n      if (flags === void 0) {\n        flags = {};\n      }\n      const consistentState = this.state;\n      let details;\n      [ch, details] = this.doPrepareChar(ch, flags);\n      details = details.aggregate(this._appendCharRaw(ch, flags));\n      if (details.inserted) {\n        let consistentTail;\n        let appended = this.doValidate(flags) !== false;\n        if (appended && checkTail != null) {\n          // validation ok, check tail\n          const beforeTailState = this.state;\n          if (this.overwrite === true) {\n            consistentTail = checkTail.state;\n            checkTail.unshift(this.displayValue.length - details.tailShift);\n          }\n          let tailDetails = this.appendTail(checkTail);\n          appended = tailDetails.rawInserted === checkTail.toString();\n\n          // not ok, try shift\n          if (!(appended && tailDetails.inserted) && this.overwrite === 'shift') {\n            this.state = beforeTailState;\n            consistentTail = checkTail.state;\n            checkTail.shift();\n            tailDetails = this.appendTail(checkTail);\n            appended = tailDetails.rawInserted === checkTail.toString();\n          }\n\n          // if ok, rollback state after tail\n          if (appended && tailDetails.inserted) this.state = beforeTailState;\n        }\n\n        // revert all if something went wrong\n        if (!appended) {\n          details = new ChangeDetails();\n          this.state = consistentState;\n          if (checkTail && consistentTail) checkTail.state = consistentTail;\n        }\n      }\n      return details;\n    }\n\n    /** Appends optional placeholder at the end */\n    _appendPlaceholder() {\n      return new ChangeDetails();\n    }\n\n    /** Appends optional eager placeholder at the end */\n    _appendEager() {\n      return new ChangeDetails();\n    }\n\n    /** Appends symbols considering flags */\n    append(str, flags, tail) {\n      if (!isString(str)) throw new Error('value should be string');\n      const checkTail = isString(tail) ? new ContinuousTailDetails(String(tail)) : tail;\n      if (flags != null && flags.tail) flags._beforeTailState = this.state;\n      let details;\n      [str, details] = this.doPrepare(str, flags);\n      for (let ci = 0; ci < str.length; ++ci) {\n        const d = this._appendChar(str[ci], flags, checkTail);\n        if (!d.rawInserted && !this.doSkipInvalid(str[ci], flags, checkTail)) break;\n        details.aggregate(d);\n      }\n      if ((this.eager === true || this.eager === 'append') && flags != null && flags.input && str) {\n        details.aggregate(this._appendEager());\n      }\n\n      // append tail but aggregate only tailShift\n      if (checkTail != null) {\n        details.tailShift += this.appendTail(checkTail).tailShift;\n        // TODO it's a good idea to clear state after appending ends\n        // but it causes bugs when one append calls another (when dynamic dispatch set rawInputValue)\n        // this._resetBeforeTailState();\n      }\n\n      return details;\n    }\n    remove(fromPos, toPos) {\n      if (fromPos === void 0) {\n        fromPos = 0;\n      }\n      if (toPos === void 0) {\n        toPos = this.displayValue.length;\n      }\n      this._value = this.displayValue.slice(0, fromPos) + this.displayValue.slice(toPos);\n      return new ChangeDetails();\n    }\n\n    /** Calls function and reapplies current value */\n    withValueRefresh(fn) {\n      if (this._refreshing || !this._initialized) return fn();\n      this._refreshing = true;\n      const rawInput = this.rawInputValue;\n      const value = this.value;\n      const ret = fn();\n      this.rawInputValue = rawInput;\n      // append lost trailing chars at the end\n      if (this.value && this.value !== value && value.indexOf(this.value) === 0) {\n        this.append(value.slice(this.displayValue.length), {}, '');\n      }\n      delete this._refreshing;\n      return ret;\n    }\n    runIsolated(fn) {\n      if (this._isolated || !this._initialized) return fn(this);\n      this._isolated = true;\n      const state = this.state;\n      const ret = fn(this);\n      this.state = state;\n      delete this._isolated;\n      return ret;\n    }\n    doSkipInvalid(ch, flags, checkTail) {\n      return Boolean(this.skipInvalid);\n    }\n\n    /** Prepares string before mask processing */\n    doPrepare(str, flags) {\n      if (flags === void 0) {\n        flags = {};\n      }\n      return ChangeDetails.normalize(this.prepare ? this.prepare(str, this, flags) : str);\n    }\n\n    /** Prepares each char before mask processing */\n    doPrepareChar(str, flags) {\n      if (flags === void 0) {\n        flags = {};\n      }\n      return ChangeDetails.normalize(this.prepareChar ? this.prepareChar(str, this, flags) : str);\n    }\n\n    /** Validates if value is acceptable */\n    doValidate(flags) {\n      return (!this.validate || this.validate(this.value, this, flags)) && (!this.parent || this.parent.doValidate(flags));\n    }\n\n    /** Does additional processing at the end of editing */\n    doCommit() {\n      if (this.commit) this.commit(this.value, this);\n    }\n    splice(start, deleteCount, inserted, removeDirection, flags) {\n      if (removeDirection === void 0) {\n        removeDirection = DIRECTION.NONE;\n      }\n      if (flags === void 0) {\n        flags = {\n          input: true\n        };\n      }\n      const tailPos = start + deleteCount;\n      const tail = this.extractTail(tailPos);\n      const eagerRemove = this.eager === true || this.eager === 'remove';\n      let oldRawValue;\n      if (eagerRemove) {\n        removeDirection = forceDirection(removeDirection);\n        oldRawValue = this.extractInput(0, tailPos, {\n          raw: true\n        });\n      }\n      let startChangePos = start;\n      const details = new ChangeDetails();\n\n      // if it is just deletion without insertion\n      if (removeDirection !== DIRECTION.NONE) {\n        startChangePos = this.nearestInputPos(start, deleteCount > 1 && start !== 0 && !eagerRemove ? DIRECTION.NONE : removeDirection);\n\n        // adjust tailShift if start was aligned\n        details.tailShift = startChangePos - start;\n      }\n      details.aggregate(this.remove(startChangePos));\n      if (eagerRemove && removeDirection !== DIRECTION.NONE && oldRawValue === this.rawInputValue) {\n        if (removeDirection === DIRECTION.FORCE_LEFT) {\n          let valLength;\n          while (oldRawValue === this.rawInputValue && (valLength = this.displayValue.length)) {\n            details.aggregate(new ChangeDetails({\n              tailShift: -1\n            })).aggregate(this.remove(valLength - 1));\n          }\n        } else if (removeDirection === DIRECTION.FORCE_RIGHT) {\n          tail.unshift();\n        }\n      }\n      return details.aggregate(this.append(inserted, flags, tail));\n    }\n    maskEquals(mask) {\n      return this.mask === mask;\n    }\n    typedValueEquals(value) {\n      const tval = this.typedValue;\n      return value === tval || Masked.EMPTY_VALUES.includes(value) && Masked.EMPTY_VALUES.includes(tval) || (this.format ? this.format(value, this) === this.format(this.typedValue, this) : false);\n    }\n  }\n  Masked.DEFAULTS = {\n    skipInvalid: true\n  };\n  Masked.EMPTY_VALUES = [undefined, null, ''];\n  IMask.Masked = Masked;\n\n  class ChunksTailDetails {\n    /** */\n\n    constructor(chunks, from) {\n      if (chunks === void 0) {\n        chunks = [];\n      }\n      if (from === void 0) {\n        from = 0;\n      }\n      this.chunks = chunks;\n      this.from = from;\n    }\n    toString() {\n      return this.chunks.map(String).join('');\n    }\n    extend(tailChunk) {\n      if (!String(tailChunk)) return;\n      tailChunk = isString(tailChunk) ? new ContinuousTailDetails(String(tailChunk)) : tailChunk;\n      const lastChunk = this.chunks[this.chunks.length - 1];\n      const extendLast = lastChunk && (\n          // if stops are same or tail has no stop\n          lastChunk.stop === tailChunk.stop || tailChunk.stop == null) &&\n        // if tail chunk goes just after last chunk\n        tailChunk.from === lastChunk.from + lastChunk.toString().length;\n      if (tailChunk instanceof ContinuousTailDetails) {\n        // check the ability to extend previous chunk\n        if (extendLast) {\n          // extend previous chunk\n          lastChunk.extend(tailChunk.toString());\n        } else {\n          // append new chunk\n          this.chunks.push(tailChunk);\n        }\n      } else if (tailChunk instanceof ChunksTailDetails) {\n        if (tailChunk.stop == null) {\n          // unwrap floating chunks to parent, keeping `from` pos\n          let firstTailChunk;\n          while (tailChunk.chunks.length && tailChunk.chunks[0].stop == null) {\n            firstTailChunk = tailChunk.chunks.shift(); // not possible to be `undefined` because length was checked above\n            firstTailChunk.from += tailChunk.from;\n            this.extend(firstTailChunk);\n          }\n        }\n\n        // if tail chunk still has value\n        if (tailChunk.toString()) {\n          // if chunks contains stops, then popup stop to container\n          tailChunk.stop = tailChunk.blockIndex;\n          this.chunks.push(tailChunk);\n        }\n      }\n    }\n    appendTo(masked) {\n      if (!(masked instanceof IMask.MaskedPattern)) {\n        const tail = new ContinuousTailDetails(this.toString());\n        return tail.appendTo(masked);\n      }\n      const details = new ChangeDetails();\n      for (let ci = 0; ci < this.chunks.length && !details.skip; ++ci) {\n        const chunk = this.chunks[ci];\n        const lastBlockIter = masked._mapPosToBlock(masked.displayValue.length);\n        const stop = chunk.stop;\n        let chunkBlock;\n        if (stop != null && (\n          // if block not found or stop is behind lastBlock\n          !lastBlockIter || lastBlockIter.index <= stop)) {\n          if (chunk instanceof ChunksTailDetails ||\n            // for continuous block also check if stop is exist\n            masked._stops.indexOf(stop) >= 0) {\n            const phDetails = masked._appendPlaceholder(stop);\n            details.aggregate(phDetails);\n          }\n          chunkBlock = chunk instanceof ChunksTailDetails && masked._blocks[stop];\n        }\n        if (chunkBlock) {\n          const tailDetails = chunkBlock.appendTail(chunk);\n          tailDetails.skip = false; // always ignore skip, it will be set on last\n          details.aggregate(tailDetails);\n          masked._value += tailDetails.inserted;\n\n          // get not inserted chars\n          const remainChars = chunk.toString().slice(tailDetails.rawInserted.length);\n          if (remainChars) details.aggregate(masked.append(remainChars, {\n            tail: true\n          }));\n        } else {\n          details.aggregate(masked.append(chunk.toString(), {\n            tail: true\n          }));\n        }\n      }\n      return details;\n    }\n    get state() {\n      return {\n        chunks: this.chunks.map(c => c.state),\n        from: this.from,\n        stop: this.stop,\n        blockIndex: this.blockIndex\n      };\n    }\n    set state(state) {\n      const {\n        chunks,\n        ...props\n      } = state;\n      Object.assign(this, props);\n      this.chunks = chunks.map(cstate => {\n        const chunk = \"chunks\" in cstate ? new ChunksTailDetails() : new ContinuousTailDetails();\n        chunk.state = cstate;\n        return chunk;\n      });\n    }\n    unshift(beforePos) {\n      if (!this.chunks.length || beforePos != null && this.from >= beforePos) return '';\n      const chunkShiftPos = beforePos != null ? beforePos - this.from : beforePos;\n      let ci = 0;\n      while (ci < this.chunks.length) {\n        const chunk = this.chunks[ci];\n        const shiftChar = chunk.unshift(chunkShiftPos);\n        if (chunk.toString()) {\n          // chunk still contains value\n          // but not shifted - means no more available chars to shift\n          if (!shiftChar) break;\n          ++ci;\n        } else {\n          // clean if chunk has no value\n          this.chunks.splice(ci, 1);\n        }\n        if (shiftChar) return shiftChar;\n      }\n      return '';\n    }\n    shift() {\n      if (!this.chunks.length) return '';\n      let ci = this.chunks.length - 1;\n      while (0 <= ci) {\n        const chunk = this.chunks[ci];\n        const shiftChar = chunk.shift();\n        if (chunk.toString()) {\n          // chunk still contains value\n          // but not shifted - means no more available chars to shift\n          if (!shiftChar) break;\n          --ci;\n        } else {\n          // clean if chunk has no value\n          this.chunks.splice(ci, 1);\n        }\n        if (shiftChar) return shiftChar;\n      }\n      return '';\n    }\n  }\n\n  class PatternCursor {\n    constructor(masked, pos) {\n      this.masked = masked;\n      this._log = [];\n      const {\n        offset,\n        index\n      } = masked._mapPosToBlock(pos) || (pos < 0 ?\n        // first\n        {\n          index: 0,\n          offset: 0\n        } :\n        // last\n        {\n          index: this.masked._blocks.length,\n          offset: 0\n        });\n      this.offset = offset;\n      this.index = index;\n      this.ok = false;\n    }\n    get block() {\n      return this.masked._blocks[this.index];\n    }\n    get pos() {\n      return this.masked._blockStartPos(this.index) + this.offset;\n    }\n    get state() {\n      return {\n        index: this.index,\n        offset: this.offset,\n        ok: this.ok\n      };\n    }\n    set state(s) {\n      Object.assign(this, s);\n    }\n    pushState() {\n      this._log.push(this.state);\n    }\n    popState() {\n      const s = this._log.pop();\n      if (s) this.state = s;\n      return s;\n    }\n    bindBlock() {\n      if (this.block) return;\n      if (this.index < 0) {\n        this.index = 0;\n        this.offset = 0;\n      }\n      if (this.index >= this.masked._blocks.length) {\n        this.index = this.masked._blocks.length - 1;\n        this.offset = this.block.displayValue.length; // TODO this is stupid type error, `block` depends on index that was changed above\n      }\n    }\n\n    _pushLeft(fn) {\n      this.pushState();\n      for (this.bindBlock(); 0 <= this.index; --this.index, this.offset = ((_this$block = this.block) == null ? void 0 : _this$block.displayValue.length) || 0) {\n        var _this$block;\n        if (fn()) return this.ok = true;\n      }\n      return this.ok = false;\n    }\n    _pushRight(fn) {\n      this.pushState();\n      for (this.bindBlock(); this.index < this.masked._blocks.length; ++this.index, this.offset = 0) {\n        if (fn()) return this.ok = true;\n      }\n      return this.ok = false;\n    }\n    pushLeftBeforeFilled() {\n      return this._pushLeft(() => {\n        if (this.block.isFixed || !this.block.value) return;\n        this.offset = this.block.nearestInputPos(this.offset, DIRECTION.FORCE_LEFT);\n        if (this.offset !== 0) return true;\n      });\n    }\n    pushLeftBeforeInput() {\n      // cases:\n      // filled input: 00|\n      // optional empty input: 00[]|\n      // nested block: XX<[]>|\n      return this._pushLeft(() => {\n        if (this.block.isFixed) return;\n        this.offset = this.block.nearestInputPos(this.offset, DIRECTION.LEFT);\n        return true;\n      });\n    }\n    pushLeftBeforeRequired() {\n      return this._pushLeft(() => {\n        if (this.block.isFixed || this.block.isOptional && !this.block.value) return;\n        this.offset = this.block.nearestInputPos(this.offset, DIRECTION.LEFT);\n        return true;\n      });\n    }\n    pushRightBeforeFilled() {\n      return this._pushRight(() => {\n        if (this.block.isFixed || !this.block.value) return;\n        this.offset = this.block.nearestInputPos(this.offset, DIRECTION.FORCE_RIGHT);\n        if (this.offset !== this.block.value.length) return true;\n      });\n    }\n    pushRightBeforeInput() {\n      return this._pushRight(() => {\n        if (this.block.isFixed) return;\n\n        // const o = this.offset;\n        this.offset = this.block.nearestInputPos(this.offset, DIRECTION.NONE);\n        // HACK cases like (STILL DOES NOT WORK FOR NESTED)\n        // aa|X\n        // aa<X|[]>X_    - this will not work\n        // if (o && o === this.offset && this.block instanceof PatternInputDefinition) continue;\n        return true;\n      });\n    }\n    pushRightBeforeRequired() {\n      return this._pushRight(() => {\n        if (this.block.isFixed || this.block.isOptional && !this.block.value) return;\n\n        // TODO check |[*]XX_\n        this.offset = this.block.nearestInputPos(this.offset, DIRECTION.NONE);\n        return true;\n      });\n    }\n  }\n\n  class PatternFixedDefinition {\n    /** */\n\n    /** */\n\n    /** */\n\n    /** */\n\n    /** */\n\n    /** */\n\n    constructor(opts) {\n      Object.assign(this, opts);\n      this._value = '';\n      this.isFixed = true;\n    }\n    get value() {\n      return this._value;\n    }\n    get unmaskedValue() {\n      return this.isUnmasking ? this.value : '';\n    }\n    get rawInputValue() {\n      return this._isRawInput ? this.value : '';\n    }\n    get displayValue() {\n      return this.value;\n    }\n    reset() {\n      this._isRawInput = false;\n      this._value = '';\n    }\n    remove(fromPos, toPos) {\n      if (fromPos === void 0) {\n        fromPos = 0;\n      }\n      if (toPos === void 0) {\n        toPos = this._value.length;\n      }\n      this._value = this._value.slice(0, fromPos) + this._value.slice(toPos);\n      if (!this._value) this._isRawInput = false;\n      return new ChangeDetails();\n    }\n    nearestInputPos(cursorPos, direction) {\n      if (direction === void 0) {\n        direction = DIRECTION.NONE;\n      }\n      const minPos = 0;\n      const maxPos = this._value.length;\n      switch (direction) {\n        case DIRECTION.LEFT:\n        case DIRECTION.FORCE_LEFT:\n          return minPos;\n        case DIRECTION.NONE:\n        case DIRECTION.RIGHT:\n        case DIRECTION.FORCE_RIGHT:\n        default:\n          return maxPos;\n      }\n    }\n    totalInputPositions(fromPos, toPos) {\n      if (fromPos === void 0) {\n        fromPos = 0;\n      }\n      if (toPos === void 0) {\n        toPos = this._value.length;\n      }\n      return this._isRawInput ? toPos - fromPos : 0;\n    }\n    extractInput(fromPos, toPos, flags) {\n      if (fromPos === void 0) {\n        fromPos = 0;\n      }\n      if (toPos === void 0) {\n        toPos = this._value.length;\n      }\n      if (flags === void 0) {\n        flags = {};\n      }\n      return flags.raw && this._isRawInput && this._value.slice(fromPos, toPos) || '';\n    }\n    get isComplete() {\n      return true;\n    }\n    get isFilled() {\n      return Boolean(this._value);\n    }\n    _appendChar(ch, flags) {\n      if (flags === void 0) {\n        flags = {};\n      }\n      const details = new ChangeDetails();\n      if (this.isFilled) return details;\n      const appendEager = this.eager === true || this.eager === 'append';\n      const appended = this.char === ch;\n      const isResolved = appended && (this.isUnmasking || flags.input || flags.raw) && (!flags.raw || !appendEager) && !flags.tail;\n      if (isResolved) details.rawInserted = this.char;\n      this._value = details.inserted = this.char;\n      this._isRawInput = isResolved && (flags.raw || flags.input);\n      return details;\n    }\n    _appendEager() {\n      return this._appendChar(this.char, {\n        tail: true\n      });\n    }\n    _appendPlaceholder() {\n      const details = new ChangeDetails();\n      if (this.isFilled) return details;\n      this._value = details.inserted = this.char;\n      return details;\n    }\n    extractTail() {\n      return new ContinuousTailDetails('');\n    }\n    appendTail(tail) {\n      if (isString(tail)) tail = new ContinuousTailDetails(String(tail));\n      return tail.appendTo(this);\n    }\n    append(str, flags, tail) {\n      const details = this._appendChar(str[0], flags);\n      if (tail != null) {\n        details.tailShift += this.appendTail(tail).tailShift;\n      }\n      return details;\n    }\n    doCommit() {}\n    get state() {\n      return {\n        _value: this._value,\n        _rawInputValue: this.rawInputValue\n      };\n    }\n    set state(state) {\n      this._value = state._value;\n      this._isRawInput = Boolean(state._rawInputValue);\n    }\n  }\n\n  class PatternInputDefinition {\n    /** */\n\n    /** */\n\n    /** */\n\n    /** */\n\n    /** */\n\n    /** */\n\n    /** */\n\n    /** */\n\n    constructor(opts) {\n      const {\n        parent,\n        isOptional,\n        placeholderChar,\n        displayChar,\n        lazy,\n        eager,\n        ...maskOpts\n      } = opts;\n      this.masked = createMask(maskOpts);\n      Object.assign(this, {\n        parent,\n        isOptional,\n        placeholderChar,\n        displayChar,\n        lazy,\n        eager\n      });\n    }\n    reset() {\n      this.isFilled = false;\n      this.masked.reset();\n    }\n    remove(fromPos, toPos) {\n      if (fromPos === void 0) {\n        fromPos = 0;\n      }\n      if (toPos === void 0) {\n        toPos = this.value.length;\n      }\n      if (fromPos === 0 && toPos >= 1) {\n        this.isFilled = false;\n        return this.masked.remove(fromPos, toPos);\n      }\n      return new ChangeDetails();\n    }\n    get value() {\n      return this.masked.value || (this.isFilled && !this.isOptional ? this.placeholderChar : '');\n    }\n    get unmaskedValue() {\n      return this.masked.unmaskedValue;\n    }\n    get rawInputValue() {\n      return this.masked.rawInputValue;\n    }\n    get displayValue() {\n      return this.masked.value && this.displayChar || this.value;\n    }\n    get isComplete() {\n      return Boolean(this.masked.value) || this.isOptional;\n    }\n    _appendChar(ch, flags) {\n      if (flags === void 0) {\n        flags = {};\n      }\n      if (this.isFilled) return new ChangeDetails();\n      const state = this.masked.state;\n      // simulate input\n      const details = this.masked._appendChar(ch, this.currentMaskFlags(flags));\n      if (details.inserted && this.doValidate(flags) === false) {\n        details.inserted = details.rawInserted = '';\n        this.masked.state = state;\n      }\n      if (!details.inserted && !this.isOptional && !this.lazy && !flags.input) {\n        details.inserted = this.placeholderChar;\n      }\n      details.skip = !details.inserted && !this.isOptional;\n      this.isFilled = Boolean(details.inserted);\n      return details;\n    }\n    append(str, flags, tail) {\n      // TODO probably should be done via _appendChar\n      return this.masked.append(str, this.currentMaskFlags(flags), tail);\n    }\n    _appendPlaceholder() {\n      const details = new ChangeDetails();\n      if (this.isFilled || this.isOptional) return details;\n      this.isFilled = true;\n      details.inserted = this.placeholderChar;\n      return details;\n    }\n    _appendEager() {\n      return new ChangeDetails();\n    }\n    extractTail(fromPos, toPos) {\n      return this.masked.extractTail(fromPos, toPos);\n    }\n    appendTail(tail) {\n      return this.masked.appendTail(tail);\n    }\n    extractInput(fromPos, toPos, flags) {\n      if (fromPos === void 0) {\n        fromPos = 0;\n      }\n      if (toPos === void 0) {\n        toPos = this.value.length;\n      }\n      return this.masked.extractInput(fromPos, toPos, flags);\n    }\n    nearestInputPos(cursorPos, direction) {\n      if (direction === void 0) {\n        direction = DIRECTION.NONE;\n      }\n      const minPos = 0;\n      const maxPos = this.value.length;\n      const boundPos = Math.min(Math.max(cursorPos, minPos), maxPos);\n      switch (direction) {\n        case DIRECTION.LEFT:\n        case DIRECTION.FORCE_LEFT:\n          return this.isComplete ? boundPos : minPos;\n        case DIRECTION.RIGHT:\n        case DIRECTION.FORCE_RIGHT:\n          return this.isComplete ? boundPos : maxPos;\n        case DIRECTION.NONE:\n        default:\n          return boundPos;\n      }\n    }\n    totalInputPositions(fromPos, toPos) {\n      if (fromPos === void 0) {\n        fromPos = 0;\n      }\n      if (toPos === void 0) {\n        toPos = this.value.length;\n      }\n      return this.value.slice(fromPos, toPos).length;\n    }\n    doValidate(flags) {\n      return this.masked.doValidate(this.currentMaskFlags(flags)) && (!this.parent || this.parent.doValidate(this.currentMaskFlags(flags)));\n    }\n    doCommit() {\n      this.masked.doCommit();\n    }\n    get state() {\n      return {\n        _value: this.value,\n        _rawInputValue: this.rawInputValue,\n        masked: this.masked.state,\n        isFilled: this.isFilled\n      };\n    }\n    set state(state) {\n      this.masked.state = state.masked;\n      this.isFilled = state.isFilled;\n    }\n    currentMaskFlags(flags) {\n      var _flags$_beforeTailSta;\n      return {\n        ...flags,\n        _beforeTailState: (flags == null || (_flags$_beforeTailSta = flags._beforeTailState) == null ? void 0 : _flags$_beforeTailSta.masked) || (flags == null ? void 0 : flags._beforeTailState)\n      };\n    }\n  }\n  PatternInputDefinition.DEFAULT_DEFINITIONS = {\n    '0': /\\d/,\n    'a': /[\\u0041-\\u005A\\u0061-\\u007A\\u00AA\\u00B5\\u00BA\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0\\u08A2-\\u08AC\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0977\\u0979-\\u097F\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C33\\u0C35-\\u0C39\\u0C3D\\u0C58\\u0C59\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D60\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191C\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19C1-\\u19C7\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2183\\u2184\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005\\u3006\\u3031-\\u3035\\u303B\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA697\\uA6A0-\\uA6E5\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA793\\uA7A0-\\uA7AA\\uA7F8-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA80-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uABC0-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]/,\n    // http://stackoverflow.com/a/22075070\n    '*': /./\n  };\n\n  /** Masking by RegExp */\n  class MaskedRegExp extends Masked {\n    /** */\n\n    /** Enable characters overwriting */\n\n    /** */\n\n    /** */\n\n    updateOptions(opts) {\n      super.updateOptions(opts);\n    }\n    _update(opts) {\n      const mask = opts.mask;\n      if (mask) opts.validate = value => value.search(mask) >= 0;\n      super._update(opts);\n    }\n  }\n  IMask.MaskedRegExp = MaskedRegExp;\n\n  /** Pattern mask */\n  class MaskedPattern extends Masked {\n    /** */\n\n    /** */\n\n    /** Single char for empty input */\n\n    /** Single char for filled input */\n\n    /** Show placeholder only when needed */\n\n    /** Enable characters overwriting */\n\n    /** */\n\n    /** */\n\n    constructor(opts) {\n      super({\n        ...MaskedPattern.DEFAULTS,\n        ...opts,\n        definitions: Object.assign({}, PatternInputDefinition.DEFAULT_DEFINITIONS, opts == null ? void 0 : opts.definitions)\n      });\n    }\n    updateOptions(opts) {\n      super.updateOptions(opts);\n    }\n    _update(opts) {\n      opts.definitions = Object.assign({}, this.definitions, opts.definitions);\n      super._update(opts);\n      this._rebuildMask();\n    }\n    _rebuildMask() {\n      const defs = this.definitions;\n      this._blocks = [];\n      this.exposeBlock = undefined;\n      this._stops = [];\n      this._maskedBlocks = {};\n      const pattern = this.mask;\n      if (!pattern || !defs) return;\n      let unmaskingBlock = false;\n      let optionalBlock = false;\n      for (let i = 0; i < pattern.length; ++i) {\n        if (this.blocks) {\n          const p = pattern.slice(i);\n          const bNames = Object.keys(this.blocks).filter(bName => p.indexOf(bName) === 0);\n          // order by key length\n          bNames.sort((a, b) => b.length - a.length);\n          // use block name with max length\n          const bName = bNames[0];\n          if (bName) {\n            const {\n              expose,\n              ...blockOpts\n            } = normalizeOpts(this.blocks[bName]);\n            const maskedBlock = createMask({\n              lazy: this.lazy,\n              eager: this.eager,\n              placeholderChar: this.placeholderChar,\n              displayChar: this.displayChar,\n              overwrite: this.overwrite,\n              ...blockOpts,\n              parent: this\n            });\n            if (maskedBlock) {\n              this._blocks.push(maskedBlock);\n              if (expose) this.exposeBlock = maskedBlock;\n\n              // store block index\n              if (!this._maskedBlocks[bName]) this._maskedBlocks[bName] = [];\n              this._maskedBlocks[bName].push(this._blocks.length - 1);\n            }\n            i += bName.length - 1;\n            continue;\n          }\n        }\n        let char = pattern[i];\n        let isInput = (char in defs);\n        if (char === MaskedPattern.STOP_CHAR) {\n          this._stops.push(this._blocks.length);\n          continue;\n        }\n        if (char === '{' || char === '}') {\n          unmaskingBlock = !unmaskingBlock;\n          continue;\n        }\n        if (char === '[' || char === ']') {\n          optionalBlock = !optionalBlock;\n          continue;\n        }\n        if (char === MaskedPattern.ESCAPE_CHAR) {\n          ++i;\n          char = pattern[i];\n          if (!char) break;\n          isInput = false;\n        }\n        const def = isInput ? new PatternInputDefinition({\n          isOptional: optionalBlock,\n          lazy: this.lazy,\n          eager: this.eager,\n          placeholderChar: this.placeholderChar,\n          displayChar: this.displayChar,\n          ...normalizeOpts(defs[char]),\n          parent: this\n        }) : new PatternFixedDefinition({\n          char,\n          eager: this.eager,\n          isUnmasking: unmaskingBlock\n        });\n        this._blocks.push(def);\n      }\n    }\n    get state() {\n      return {\n        ...super.state,\n        _blocks: this._blocks.map(b => b.state)\n      };\n    }\n    set state(state) {\n      const {\n        _blocks,\n        ...maskedState\n      } = state;\n      this._blocks.forEach((b, bi) => b.state = _blocks[bi]);\n      super.state = maskedState;\n    }\n    reset() {\n      super.reset();\n      this._blocks.forEach(b => b.reset());\n    }\n    get isComplete() {\n      return this.exposeBlock ? this.exposeBlock.isComplete : this._blocks.every(b => b.isComplete);\n    }\n    get isFilled() {\n      return this._blocks.every(b => b.isFilled);\n    }\n    get isFixed() {\n      return this._blocks.every(b => b.isFixed);\n    }\n    get isOptional() {\n      return this._blocks.every(b => b.isOptional);\n    }\n    doCommit() {\n      this._blocks.forEach(b => b.doCommit());\n      super.doCommit();\n    }\n    get unmaskedValue() {\n      return this.exposeBlock ? this.exposeBlock.unmaskedValue : this._blocks.reduce((str, b) => str += b.unmaskedValue, '');\n    }\n    set unmaskedValue(unmaskedValue) {\n      if (this.exposeBlock) {\n        const tail = this.extractTail(this._blockStartPos(this._blocks.indexOf(this.exposeBlock)) + this.exposeBlock.displayValue.length);\n        this.exposeBlock.unmaskedValue = unmaskedValue;\n        this.appendTail(tail);\n        this.doCommit();\n      } else super.unmaskedValue = unmaskedValue;\n    }\n    get value() {\n      return this.exposeBlock ? this.exposeBlock.value :\n        // TODO return _value when not in change?\n        this._blocks.reduce((str, b) => str += b.value, '');\n    }\n    set value(value) {\n      if (this.exposeBlock) {\n        const tail = this.extractTail(this._blockStartPos(this._blocks.indexOf(this.exposeBlock)) + this.exposeBlock.displayValue.length);\n        this.exposeBlock.value = value;\n        this.appendTail(tail);\n        this.doCommit();\n      } else super.value = value;\n    }\n    get typedValue() {\n      return this.exposeBlock ? this.exposeBlock.typedValue : super.typedValue;\n    }\n    set typedValue(value) {\n      if (this.exposeBlock) {\n        const tail = this.extractTail(this._blockStartPos(this._blocks.indexOf(this.exposeBlock)) + this.exposeBlock.displayValue.length);\n        this.exposeBlock.typedValue = value;\n        this.appendTail(tail);\n        this.doCommit();\n      } else super.typedValue = value;\n    }\n    get displayValue() {\n      return this._blocks.reduce((str, b) => str += b.displayValue, '');\n    }\n    appendTail(tail) {\n      return super.appendTail(tail).aggregate(this._appendPlaceholder());\n    }\n    _appendEager() {\n      var _this$_mapPosToBlock;\n      const details = new ChangeDetails();\n      let startBlockIndex = (_this$_mapPosToBlock = this._mapPosToBlock(this.displayValue.length)) == null ? void 0 : _this$_mapPosToBlock.index;\n      if (startBlockIndex == null) return details;\n\n      // TODO test if it works for nested pattern masks\n      if (this._blocks[startBlockIndex].isFilled) ++startBlockIndex;\n      for (let bi = startBlockIndex; bi < this._blocks.length; ++bi) {\n        const d = this._blocks[bi]._appendEager();\n        if (!d.inserted) break;\n        details.aggregate(d);\n      }\n      return details;\n    }\n    _appendCharRaw(ch, flags) {\n      if (flags === void 0) {\n        flags = {};\n      }\n      const blockIter = this._mapPosToBlock(this.displayValue.length);\n      const details = new ChangeDetails();\n      if (!blockIter) return details;\n      for (let bi = blockIter.index;; ++bi) {\n        var _flags$_beforeTailSta;\n        const block = this._blocks[bi];\n        if (!block) break;\n        const blockDetails = block._appendChar(ch, {\n          ...flags,\n          _beforeTailState: (_flags$_beforeTailSta = flags._beforeTailState) == null || (_flags$_beforeTailSta = _flags$_beforeTailSta._blocks) == null ? void 0 : _flags$_beforeTailSta[bi]\n        });\n        const skip = blockDetails.skip;\n        details.aggregate(blockDetails);\n        if (skip || blockDetails.rawInserted) break; // go next char\n      }\n\n      return details;\n    }\n    extractTail(fromPos, toPos) {\n      if (fromPos === void 0) {\n        fromPos = 0;\n      }\n      if (toPos === void 0) {\n        toPos = this.displayValue.length;\n      }\n      const chunkTail = new ChunksTailDetails();\n      if (fromPos === toPos) return chunkTail;\n      this._forEachBlocksInRange(fromPos, toPos, (b, bi, bFromPos, bToPos) => {\n        const blockChunk = b.extractTail(bFromPos, bToPos);\n        blockChunk.stop = this._findStopBefore(bi);\n        blockChunk.from = this._blockStartPos(bi);\n        if (blockChunk instanceof ChunksTailDetails) blockChunk.blockIndex = bi;\n        chunkTail.extend(blockChunk);\n      });\n      return chunkTail;\n    }\n    extractInput(fromPos, toPos, flags) {\n      if (fromPos === void 0) {\n        fromPos = 0;\n      }\n      if (toPos === void 0) {\n        toPos = this.displayValue.length;\n      }\n      if (flags === void 0) {\n        flags = {};\n      }\n      if (fromPos === toPos) return '';\n      let input = '';\n      this._forEachBlocksInRange(fromPos, toPos, (b, _, fromPos, toPos) => {\n        input += b.extractInput(fromPos, toPos, flags);\n      });\n      return input;\n    }\n    _findStopBefore(blockIndex) {\n      let stopBefore;\n      for (let si = 0; si < this._stops.length; ++si) {\n        const stop = this._stops[si];\n        if (stop <= blockIndex) stopBefore = stop;else break;\n      }\n      return stopBefore;\n    }\n\n    /** Appends placeholder depending on laziness */\n    _appendPlaceholder(toBlockIndex) {\n      const details = new ChangeDetails();\n      if (this.lazy && toBlockIndex == null) return details;\n      const startBlockIter = this._mapPosToBlock(this.displayValue.length);\n      if (!startBlockIter) return details;\n      const startBlockIndex = startBlockIter.index;\n      const endBlockIndex = toBlockIndex != null ? toBlockIndex : this._blocks.length;\n      this._blocks.slice(startBlockIndex, endBlockIndex).forEach(b => {\n        if (!b.lazy || toBlockIndex != null) {\n          var _blocks2;\n          const bDetails = b._appendPlaceholder((_blocks2 = b._blocks) == null ? void 0 : _blocks2.length);\n          this._value += bDetails.inserted;\n          details.aggregate(bDetails);\n        }\n      });\n      return details;\n    }\n\n    /** Finds block in pos */\n    _mapPosToBlock(pos) {\n      let accVal = '';\n      for (let bi = 0; bi < this._blocks.length; ++bi) {\n        const block = this._blocks[bi];\n        const blockStartPos = accVal.length;\n        accVal += block.displayValue;\n        if (pos <= accVal.length) {\n          return {\n            index: bi,\n            offset: pos - blockStartPos\n          };\n        }\n      }\n    }\n    _blockStartPos(blockIndex) {\n      return this._blocks.slice(0, blockIndex).reduce((pos, b) => pos += b.displayValue.length, 0);\n    }\n    _forEachBlocksInRange(fromPos, toPos, fn) {\n      if (toPos === void 0) {\n        toPos = this.displayValue.length;\n      }\n      const fromBlockIter = this._mapPosToBlock(fromPos);\n      if (fromBlockIter) {\n        const toBlockIter = this._mapPosToBlock(toPos);\n        // process first block\n        const isSameBlock = toBlockIter && fromBlockIter.index === toBlockIter.index;\n        const fromBlockStartPos = fromBlockIter.offset;\n        const fromBlockEndPos = toBlockIter && isSameBlock ? toBlockIter.offset : this._blocks[fromBlockIter.index].displayValue.length;\n        fn(this._blocks[fromBlockIter.index], fromBlockIter.index, fromBlockStartPos, fromBlockEndPos);\n        if (toBlockIter && !isSameBlock) {\n          // process intermediate blocks\n          for (let bi = fromBlockIter.index + 1; bi < toBlockIter.index; ++bi) {\n            fn(this._blocks[bi], bi, 0, this._blocks[bi].displayValue.length);\n          }\n\n          // process last block\n          fn(this._blocks[toBlockIter.index], toBlockIter.index, 0, toBlockIter.offset);\n        }\n      }\n    }\n    remove(fromPos, toPos) {\n      if (fromPos === void 0) {\n        fromPos = 0;\n      }\n      if (toPos === void 0) {\n        toPos = this.displayValue.length;\n      }\n      const removeDetails = super.remove(fromPos, toPos);\n      this._forEachBlocksInRange(fromPos, toPos, (b, _, bFromPos, bToPos) => {\n        removeDetails.aggregate(b.remove(bFromPos, bToPos));\n      });\n      return removeDetails;\n    }\n    nearestInputPos(cursorPos, direction) {\n      if (direction === void 0) {\n        direction = DIRECTION.NONE;\n      }\n      if (!this._blocks.length) return 0;\n      const cursor = new PatternCursor(this, cursorPos);\n      if (direction === DIRECTION.NONE) {\n        // -------------------------------------------------\n        // NONE should only go out from fixed to the right!\n        // -------------------------------------------------\n        if (cursor.pushRightBeforeInput()) return cursor.pos;\n        cursor.popState();\n        if (cursor.pushLeftBeforeInput()) return cursor.pos;\n        return this.displayValue.length;\n      }\n\n      // FORCE is only about a|* otherwise is 0\n      if (direction === DIRECTION.LEFT || direction === DIRECTION.FORCE_LEFT) {\n        // try to break fast when *|a\n        if (direction === DIRECTION.LEFT) {\n          cursor.pushRightBeforeFilled();\n          if (cursor.ok && cursor.pos === cursorPos) return cursorPos;\n          cursor.popState();\n        }\n\n        // forward flow\n        cursor.pushLeftBeforeInput();\n        cursor.pushLeftBeforeRequired();\n        cursor.pushLeftBeforeFilled();\n\n        // backward flow\n        if (direction === DIRECTION.LEFT) {\n          cursor.pushRightBeforeInput();\n          cursor.pushRightBeforeRequired();\n          if (cursor.ok && cursor.pos <= cursorPos) return cursor.pos;\n          cursor.popState();\n          if (cursor.ok && cursor.pos <= cursorPos) return cursor.pos;\n          cursor.popState();\n        }\n        if (cursor.ok) return cursor.pos;\n        if (direction === DIRECTION.FORCE_LEFT) return 0;\n        cursor.popState();\n        if (cursor.ok) return cursor.pos;\n        cursor.popState();\n        if (cursor.ok) return cursor.pos;\n        return 0;\n      }\n      if (direction === DIRECTION.RIGHT || direction === DIRECTION.FORCE_RIGHT) {\n        // forward flow\n        cursor.pushRightBeforeInput();\n        cursor.pushRightBeforeRequired();\n        if (cursor.pushRightBeforeFilled()) return cursor.pos;\n        if (direction === DIRECTION.FORCE_RIGHT) return this.displayValue.length;\n\n        // backward flow\n        cursor.popState();\n        if (cursor.ok) return cursor.pos;\n        cursor.popState();\n        if (cursor.ok) return cursor.pos;\n        return this.nearestInputPos(cursorPos, DIRECTION.LEFT);\n      }\n      return cursorPos;\n    }\n    totalInputPositions(fromPos, toPos) {\n      if (fromPos === void 0) {\n        fromPos = 0;\n      }\n      if (toPos === void 0) {\n        toPos = this.displayValue.length;\n      }\n      let total = 0;\n      this._forEachBlocksInRange(fromPos, toPos, (b, _, bFromPos, bToPos) => {\n        total += b.totalInputPositions(bFromPos, bToPos);\n      });\n      return total;\n    }\n\n    /** Get block by name */\n    maskedBlock(name) {\n      return this.maskedBlocks(name)[0];\n    }\n\n    /** Get all blocks by name */\n    maskedBlocks(name) {\n      const indices = this._maskedBlocks[name];\n      if (!indices) return [];\n      return indices.map(gi => this._blocks[gi]);\n    }\n  }\n  MaskedPattern.DEFAULTS = {\n    lazy: true,\n    placeholderChar: '_'\n  };\n  MaskedPattern.STOP_CHAR = '`';\n  MaskedPattern.ESCAPE_CHAR = '\\\\';\n  MaskedPattern.InputDefinition = PatternInputDefinition;\n  MaskedPattern.FixedDefinition = PatternFixedDefinition;\n  IMask.MaskedPattern = MaskedPattern;\n\n  /** Pattern which accepts ranges */\n  class MaskedRange extends MaskedPattern {\n    /**\n     Optionally sets max length of pattern.\n     Used when pattern length is longer then `to` param length. Pads zeros at start in this case.\n     */\n\n    /** Min bound */\n\n    /** Max bound */\n\n    /** */\n\n    get _matchFrom() {\n      return this.maxLength - String(this.from).length;\n    }\n    constructor(opts) {\n      super(opts); // mask will be created in _update\n    }\n\n    updateOptions(opts) {\n      super.updateOptions(opts);\n    }\n    _update(opts) {\n      const {\n        to = this.to || 0,\n        from = this.from || 0,\n        maxLength = this.maxLength || 0,\n        autofix = this.autofix,\n        ...patternOpts\n      } = opts;\n      this.to = to;\n      this.from = from;\n      this.maxLength = Math.max(String(to).length, maxLength);\n      this.autofix = autofix;\n      const fromStr = String(this.from).padStart(this.maxLength, '0');\n      const toStr = String(this.to).padStart(this.maxLength, '0');\n      let sameCharsCount = 0;\n      while (sameCharsCount < toStr.length && toStr[sameCharsCount] === fromStr[sameCharsCount]) ++sameCharsCount;\n      patternOpts.mask = toStr.slice(0, sameCharsCount).replace(/0/g, '\\\\0') + '0'.repeat(this.maxLength - sameCharsCount);\n      super._update(patternOpts);\n    }\n    get isComplete() {\n      return super.isComplete && Boolean(this.value);\n    }\n    boundaries(str) {\n      let minstr = '';\n      let maxstr = '';\n      const [, placeholder, num] = str.match(/^(\\D*)(\\d*)(\\D*)/) || [];\n      if (num) {\n        minstr = '0'.repeat(placeholder.length) + num;\n        maxstr = '9'.repeat(placeholder.length) + num;\n      }\n      minstr = minstr.padEnd(this.maxLength, '0');\n      maxstr = maxstr.padEnd(this.maxLength, '9');\n      return [minstr, maxstr];\n    }\n    doPrepareChar(ch, flags) {\n      if (flags === void 0) {\n        flags = {};\n      }\n      let details;\n      [ch, details] = super.doPrepareChar(ch.replace(/\\D/g, ''), flags);\n      if (!this.autofix || !ch) return [ch, details];\n      const fromStr = String(this.from).padStart(this.maxLength, '0');\n      const toStr = String(this.to).padStart(this.maxLength, '0');\n      const nextVal = this.value + ch;\n      if (nextVal.length > this.maxLength) return ['', details];\n      const [minstr, maxstr] = this.boundaries(nextVal);\n      if (Number(maxstr) < this.from) return [fromStr[nextVal.length - 1], details];\n      if (Number(minstr) > this.to) {\n        if (this.autofix === 'pad' && nextVal.length < this.maxLength) {\n          return ['', details.aggregate(this.append(fromStr[nextVal.length - 1] + ch, flags))];\n        }\n        return [toStr[nextVal.length - 1], details];\n      }\n      return [ch, details];\n    }\n    doValidate(flags) {\n      const str = this.value;\n      const firstNonZero = str.search(/[^0]/);\n      if (firstNonZero === -1 && str.length <= this._matchFrom) return true;\n      const [minstr, maxstr] = this.boundaries(str);\n      return this.from <= Number(maxstr) && Number(minstr) <= this.to && super.doValidate(flags);\n    }\n  }\n  IMask.MaskedRange = MaskedRange;\n\n  /** Date mask */\n  class MaskedDate extends MaskedPattern {\n    /** Pattern mask for date according to {@link MaskedDate#format} */\n\n    /** Start date */\n\n    /** End date */\n\n    /** */\n\n    /** Format typed value to string */\n\n    /** Parse string to get typed value */\n\n    constructor(opts) {\n      const {\n        mask,\n        pattern,\n        ...patternOpts\n      } = {\n        ...MaskedDate.DEFAULTS,\n        ...opts\n      };\n      super({\n        ...patternOpts,\n        mask: isString(mask) ? mask : pattern\n      });\n    }\n    updateOptions(opts) {\n      super.updateOptions(opts);\n    }\n    _update(opts) {\n      const {\n        mask,\n        pattern,\n        blocks,\n        ...patternOpts\n      } = {\n        ...MaskedDate.DEFAULTS,\n        ...opts\n      };\n      const patternBlocks = Object.assign({}, MaskedDate.GET_DEFAULT_BLOCKS());\n      // adjust year block\n      if (opts.min) patternBlocks.Y.from = opts.min.getFullYear();\n      if (opts.max) patternBlocks.Y.to = opts.max.getFullYear();\n      if (opts.min && opts.max && patternBlocks.Y.from === patternBlocks.Y.to) {\n        patternBlocks.m.from = opts.min.getMonth() + 1;\n        patternBlocks.m.to = opts.max.getMonth() + 1;\n        if (patternBlocks.m.from === patternBlocks.m.to) {\n          patternBlocks.d.from = opts.min.getDate();\n          patternBlocks.d.to = opts.max.getDate();\n        }\n      }\n      Object.assign(patternBlocks, this.blocks, blocks);\n\n      // add autofix\n      Object.keys(patternBlocks).forEach(bk => {\n        const b = patternBlocks[bk];\n        if (!('autofix' in b) && 'autofix' in opts) b.autofix = opts.autofix;\n      });\n      super._update({\n        ...patternOpts,\n        mask: isString(mask) ? mask : pattern,\n        blocks: patternBlocks\n      });\n    }\n    doValidate(flags) {\n      const date = this.date;\n      return super.doValidate(flags) && (!this.isComplete || this.isDateExist(this.value) && date != null && (this.min == null || this.min <= date) && (this.max == null || date <= this.max));\n    }\n\n    /** Checks if date is exists */\n    isDateExist(str) {\n      return this.format(this.parse(str, this), this).indexOf(str) >= 0;\n    }\n\n    /** Parsed Date */\n    get date() {\n      return this.typedValue;\n    }\n    set date(date) {\n      this.typedValue = date;\n    }\n    get typedValue() {\n      return this.isComplete ? super.typedValue : null;\n    }\n    set typedValue(value) {\n      super.typedValue = value;\n    }\n    maskEquals(mask) {\n      return mask === Date || super.maskEquals(mask);\n    }\n  }\n  MaskedDate.GET_DEFAULT_BLOCKS = () => ({\n    d: {\n      mask: MaskedRange,\n      from: 1,\n      to: 31,\n      maxLength: 2\n    },\n    m: {\n      mask: MaskedRange,\n      from: 1,\n      to: 12,\n      maxLength: 2\n    },\n    Y: {\n      mask: MaskedRange,\n      from: 1900,\n      to: 9999\n    }\n  });\n  MaskedDate.DEFAULTS = {\n    mask: Date,\n    pattern: 'd{.}`m{.}`Y',\n    format: (date, masked) => {\n      if (!date) return '';\n      const day = String(date.getDate()).padStart(2, '0');\n      const month = String(date.getMonth() + 1).padStart(2, '0');\n      const year = date.getFullYear();\n      return [day, month, year].join('.');\n    },\n    parse: (str, masked) => {\n      const [day, month, year] = str.split('.').map(Number);\n      return new Date(year, month - 1, day);\n    }\n  };\n  IMask.MaskedDate = MaskedDate;\n\n  /** Dynamic mask for choosing appropriate mask in run-time */\n  class MaskedDynamic extends Masked {\n    /** Currently chosen mask */\n\n    /** Currently chosen mask */\n\n    /** Compliled {@link Masked} options */\n\n    /** Chooses {@link Masked} depending on input value */\n\n    constructor(opts) {\n      super({\n        ...MaskedDynamic.DEFAULTS,\n        ...opts\n      });\n      this.currentMask = undefined;\n    }\n    updateOptions(opts) {\n      super.updateOptions(opts);\n    }\n    _update(opts) {\n      super._update(opts);\n      if ('mask' in opts) {\n        this.exposeMask = undefined;\n        // mask could be totally dynamic with only `dispatch` option\n        this.compiledMasks = Array.isArray(opts.mask) ? opts.mask.map(m => {\n          const {\n            expose,\n            ...maskOpts\n          } = normalizeOpts(m);\n          const masked = createMask({\n            overwrite: this._overwrite,\n            eager: this._eager,\n            skipInvalid: this._skipInvalid,\n            ...maskOpts\n          });\n          if (expose) this.exposeMask = masked;\n          return masked;\n        }) : [];\n\n        // this.currentMask = this.doDispatch(''); // probably not needed but lets see\n      }\n    }\n\n    _appendCharRaw(ch, flags) {\n      if (flags === void 0) {\n        flags = {};\n      }\n      const details = this._applyDispatch(ch, flags);\n      if (this.currentMask) {\n        details.aggregate(this.currentMask._appendChar(ch, this.currentMaskFlags(flags)));\n      }\n      return details;\n    }\n    _applyDispatch(appended, flags, tail) {\n      if (appended === void 0) {\n        appended = '';\n      }\n      if (flags === void 0) {\n        flags = {};\n      }\n      if (tail === void 0) {\n        tail = '';\n      }\n      const prevValueBeforeTail = flags.tail && flags._beforeTailState != null ? flags._beforeTailState._value : this.value;\n      const inputValue = this.rawInputValue;\n      const insertValue = flags.tail && flags._beforeTailState != null ? flags._beforeTailState._rawInputValue : inputValue;\n      const tailValue = inputValue.slice(insertValue.length);\n      const prevMask = this.currentMask;\n      const details = new ChangeDetails();\n      const prevMaskState = prevMask == null ? void 0 : prevMask.state;\n\n      // clone flags to prevent overwriting `_beforeTailState`\n      this.currentMask = this.doDispatch(appended, {\n        ...flags\n      }, tail);\n\n      // restore state after dispatch\n      if (this.currentMask) {\n        if (this.currentMask !== prevMask) {\n          // if mask changed reapply input\n          this.currentMask.reset();\n          if (insertValue) {\n            const d = this.currentMask.append(insertValue, {\n              raw: true\n            });\n            details.tailShift = d.inserted.length - prevValueBeforeTail.length;\n          }\n          if (tailValue) {\n            details.tailShift += this.currentMask.append(tailValue, {\n              raw: true,\n              tail: true\n            }).tailShift;\n          }\n        } else if (prevMaskState) {\n          // Dispatch can do something bad with state, so\n          // restore prev mask state\n          this.currentMask.state = prevMaskState;\n        }\n      }\n      return details;\n    }\n    _appendPlaceholder() {\n      const details = this._applyDispatch();\n      if (this.currentMask) {\n        details.aggregate(this.currentMask._appendPlaceholder());\n      }\n      return details;\n    }\n    _appendEager() {\n      const details = this._applyDispatch();\n      if (this.currentMask) {\n        details.aggregate(this.currentMask._appendEager());\n      }\n      return details;\n    }\n    appendTail(tail) {\n      const details = new ChangeDetails();\n      if (tail) details.aggregate(this._applyDispatch('', {}, tail));\n      return details.aggregate(this.currentMask ? this.currentMask.appendTail(tail) : super.appendTail(tail));\n    }\n    currentMaskFlags(flags) {\n      var _flags$_beforeTailSta, _flags$_beforeTailSta2;\n      return {\n        ...flags,\n        _beforeTailState: ((_flags$_beforeTailSta = flags._beforeTailState) == null ? void 0 : _flags$_beforeTailSta.currentMaskRef) === this.currentMask && ((_flags$_beforeTailSta2 = flags._beforeTailState) == null ? void 0 : _flags$_beforeTailSta2.currentMask) || flags._beforeTailState\n      };\n    }\n    doDispatch(appended, flags, tail) {\n      if (flags === void 0) {\n        flags = {};\n      }\n      if (tail === void 0) {\n        tail = '';\n      }\n      return this.dispatch(appended, this, flags, tail);\n    }\n    doValidate(flags) {\n      return super.doValidate(flags) && (!this.currentMask || this.currentMask.doValidate(this.currentMaskFlags(flags)));\n    }\n    doPrepare(str, flags) {\n      if (flags === void 0) {\n        flags = {};\n      }\n      let [s, details] = super.doPrepare(str, flags);\n      if (this.currentMask) {\n        let currentDetails;\n        [s, currentDetails] = super.doPrepare(s, this.currentMaskFlags(flags));\n        details = details.aggregate(currentDetails);\n      }\n      return [s, details];\n    }\n    doPrepareChar(str, flags) {\n      if (flags === void 0) {\n        flags = {};\n      }\n      let [s, details] = super.doPrepareChar(str, flags);\n      if (this.currentMask) {\n        let currentDetails;\n        [s, currentDetails] = super.doPrepareChar(s, this.currentMaskFlags(flags));\n        details = details.aggregate(currentDetails);\n      }\n      return [s, details];\n    }\n    reset() {\n      var _this$currentMask;\n      (_this$currentMask = this.currentMask) == null ? void 0 : _this$currentMask.reset();\n      this.compiledMasks.forEach(m => m.reset());\n    }\n    get value() {\n      return this.exposeMask ? this.exposeMask.value : this.currentMask ? this.currentMask.value : '';\n    }\n    set value(value) {\n      if (this.exposeMask) {\n        this.exposeMask.value = value;\n        this.currentMask = this.exposeMask;\n        this._applyDispatch();\n      } else super.value = value;\n    }\n    get unmaskedValue() {\n      return this.exposeMask ? this.exposeMask.unmaskedValue : this.currentMask ? this.currentMask.unmaskedValue : '';\n    }\n    set unmaskedValue(unmaskedValue) {\n      if (this.exposeMask) {\n        this.exposeMask.unmaskedValue = unmaskedValue;\n        this.currentMask = this.exposeMask;\n        this._applyDispatch();\n      } else super.unmaskedValue = unmaskedValue;\n    }\n    get typedValue() {\n      return this.exposeMask ? this.exposeMask.typedValue : this.currentMask ? this.currentMask.typedValue : '';\n    }\n    set typedValue(typedValue) {\n      if (this.exposeMask) {\n        this.exposeMask.typedValue = typedValue;\n        this.currentMask = this.exposeMask;\n        this._applyDispatch();\n        return;\n      }\n      let unmaskedValue = String(typedValue);\n\n      // double check it\n      if (this.currentMask) {\n        this.currentMask.typedValue = typedValue;\n        unmaskedValue = this.currentMask.unmaskedValue;\n      }\n      this.unmaskedValue = unmaskedValue;\n    }\n    get displayValue() {\n      return this.currentMask ? this.currentMask.displayValue : '';\n    }\n    get isComplete() {\n      var _this$currentMask2;\n      return Boolean((_this$currentMask2 = this.currentMask) == null ? void 0 : _this$currentMask2.isComplete);\n    }\n    get isFilled() {\n      var _this$currentMask3;\n      return Boolean((_this$currentMask3 = this.currentMask) == null ? void 0 : _this$currentMask3.isFilled);\n    }\n    remove(fromPos, toPos) {\n      const details = new ChangeDetails();\n      if (this.currentMask) {\n        details.aggregate(this.currentMask.remove(fromPos, toPos))\n          // update with dispatch\n          .aggregate(this._applyDispatch());\n      }\n      return details;\n    }\n    get state() {\n      var _this$currentMask4;\n      return {\n        ...super.state,\n        _rawInputValue: this.rawInputValue,\n        compiledMasks: this.compiledMasks.map(m => m.state),\n        currentMaskRef: this.currentMask,\n        currentMask: (_this$currentMask4 = this.currentMask) == null ? void 0 : _this$currentMask4.state\n      };\n    }\n    set state(state) {\n      const {\n        compiledMasks,\n        currentMaskRef,\n        currentMask,\n        ...maskedState\n      } = state;\n      if (compiledMasks) this.compiledMasks.forEach((m, mi) => m.state = compiledMasks[mi]);\n      if (currentMaskRef != null) {\n        this.currentMask = currentMaskRef;\n        this.currentMask.state = currentMask;\n      }\n      super.state = maskedState;\n    }\n    extractInput(fromPos, toPos, flags) {\n      return this.currentMask ? this.currentMask.extractInput(fromPos, toPos, flags) : '';\n    }\n    extractTail(fromPos, toPos) {\n      return this.currentMask ? this.currentMask.extractTail(fromPos, toPos) : super.extractTail(fromPos, toPos);\n    }\n    doCommit() {\n      if (this.currentMask) this.currentMask.doCommit();\n      super.doCommit();\n    }\n    nearestInputPos(cursorPos, direction) {\n      return this.currentMask ? this.currentMask.nearestInputPos(cursorPos, direction) : super.nearestInputPos(cursorPos, direction);\n    }\n    get overwrite() {\n      return this.currentMask ? this.currentMask.overwrite : this._overwrite;\n    }\n    set overwrite(overwrite) {\n      this._overwrite = overwrite;\n    }\n    get eager() {\n      return this.currentMask ? this.currentMask.eager : this._eager;\n    }\n    set eager(eager) {\n      this._eager = eager;\n    }\n    get skipInvalid() {\n      return this.currentMask ? this.currentMask.skipInvalid : this._skipInvalid;\n    }\n    set skipInvalid(skipInvalid) {\n      this._skipInvalid = skipInvalid;\n    }\n    maskEquals(mask) {\n      return Array.isArray(mask) ? this.compiledMasks.every((m, mi) => {\n        if (!mask[mi]) return;\n        const {\n          mask: oldMask,\n          ...restOpts\n        } = mask[mi];\n        return objectIncludes(m, restOpts) && m.maskEquals(oldMask);\n      }) : super.maskEquals(mask);\n    }\n    typedValueEquals(value) {\n      var _this$currentMask5;\n      return Boolean((_this$currentMask5 = this.currentMask) == null ? void 0 : _this$currentMask5.typedValueEquals(value));\n    }\n  }\n  MaskedDynamic.DEFAULTS = void 0;\n  MaskedDynamic.DEFAULTS = {\n    dispatch: (appended, masked, flags, tail) => {\n      if (!masked.compiledMasks.length) return;\n      const inputValue = masked.rawInputValue;\n\n      // simulate input\n      const inputs = masked.compiledMasks.map((m, index) => {\n        const isCurrent = masked.currentMask === m;\n        const startInputPos = isCurrent ? m.displayValue.length : m.nearestInputPos(m.displayValue.length, DIRECTION.FORCE_LEFT);\n        if (m.rawInputValue !== inputValue) {\n          m.reset();\n          m.append(inputValue, {\n            raw: true\n          });\n        } else if (!isCurrent) {\n          m.remove(startInputPos);\n        }\n        m.append(appended, masked.currentMaskFlags(flags));\n        m.appendTail(tail);\n        return {\n          index,\n          weight: m.rawInputValue.length,\n          totalInputPositions: m.totalInputPositions(0, Math.max(startInputPos, m.nearestInputPos(m.displayValue.length, DIRECTION.FORCE_LEFT)))\n        };\n      });\n\n      // pop masks with longer values first\n      inputs.sort((i1, i2) => i2.weight - i1.weight || i2.totalInputPositions - i1.totalInputPositions);\n      return masked.compiledMasks[inputs[0].index];\n    }\n  };\n  IMask.MaskedDynamic = MaskedDynamic;\n\n  /** Pattern which validates enum values */\n  class MaskedEnum extends MaskedPattern {\n    constructor(opts) {\n      super(opts); // mask will be created in _update\n    }\n\n    updateOptions(opts) {\n      super.updateOptions(opts);\n    }\n    _update(opts) {\n      const {\n        enum: _enum,\n        ...eopts\n      } = opts;\n      if (_enum) {\n        const lengths = _enum.map(e => e.length);\n        const requiredLength = Math.min(...lengths);\n        const optionalLength = Math.max(...lengths) - requiredLength;\n        eopts.mask = '*'.repeat(requiredLength);\n        if (optionalLength) eopts.mask += '[' + '*'.repeat(optionalLength) + ']';\n        this.enum = _enum;\n      }\n      super._update(eopts);\n    }\n    doValidate(flags) {\n      return this.enum.some(e => e.indexOf(this.unmaskedValue) === 0) && super.doValidate(flags);\n    }\n  }\n  IMask.MaskedEnum = MaskedEnum;\n\n  /** Masking by custom Function */\n  class MaskedFunction extends Masked {\n    /** */\n\n    /** Enable characters overwriting */\n\n    /** */\n\n    /** */\n\n    updateOptions(opts) {\n      super.updateOptions(opts);\n    }\n    _update(opts) {\n      super._update({\n        ...opts,\n        validate: opts.mask\n      });\n    }\n  }\n  IMask.MaskedFunction = MaskedFunction;\n\n  /** Number mask */\n  class MaskedNumber extends Masked {\n    /** Single char */\n\n    /** Single char */\n\n    /** Array of single chars */\n\n    /** */\n\n    /** */\n\n    /** Digits after point */\n\n    /** Flag to remove leading and trailing zeros in the end of editing */\n\n    /** Flag to pad trailing zeros after point in the end of editing */\n\n    /** Enable characters overwriting */\n\n    /** */\n\n    /** */\n\n    /** Format typed value to string */\n\n    /** Parse string to get typed value */\n\n    constructor(opts) {\n      super({\n        ...MaskedNumber.DEFAULTS,\n        ...opts\n      });\n    }\n    updateOptions(opts) {\n      super.updateOptions(opts);\n    }\n    _update(opts) {\n      super._update(opts);\n      this._updateRegExps();\n    }\n    _updateRegExps() {\n      const start = '^' + (this.allowNegative ? '[+|\\\\-]?' : '');\n      const mid = '\\\\d*';\n      const end = (this.scale ? \"(\" + escapeRegExp(this.radix) + \"\\\\d{0,\" + this.scale + \"})?\" : '') + '$';\n      this._numberRegExp = new RegExp(start + mid + end);\n      this._mapToRadixRegExp = new RegExp(\"[\" + this.mapToRadix.map(escapeRegExp).join('') + \"]\", 'g');\n      this._thousandsSeparatorRegExp = new RegExp(escapeRegExp(this.thousandsSeparator), 'g');\n    }\n    _removeThousandsSeparators(value) {\n      return value.replace(this._thousandsSeparatorRegExp, '');\n    }\n    _insertThousandsSeparators(value) {\n      // https://stackoverflow.com/questions/2901102/how-to-print-a-number-with-commas-as-thousands-separators-in-javascript\n      const parts = value.split(this.radix);\n      parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, this.thousandsSeparator);\n      return parts.join(this.radix);\n    }\n    doPrepareChar(ch, flags) {\n      if (flags === void 0) {\n        flags = {};\n      }\n      const [prepCh, details] = super.doPrepareChar(this._removeThousandsSeparators(this.scale && this.mapToRadix.length && (\n        /*\n          radix should be mapped when\n          1) input is done from keyboard = flags.input && flags.raw\n          2) unmasked value is set = !flags.input && !flags.raw\n          and should not be mapped when\n          1) value is set = flags.input && !flags.raw\n          2) raw value is set = !flags.input && flags.raw\n        */\n        flags.input && flags.raw || !flags.input && !flags.raw) ? ch.replace(this._mapToRadixRegExp, this.radix) : ch), flags);\n      if (ch && !prepCh) details.skip = true;\n      if (prepCh && !this.allowPositive && !this.value && prepCh !== '-') details.aggregate(this._appendChar('-'));\n      return [prepCh, details];\n    }\n    _separatorsCount(to, extendOnSeparators) {\n      if (extendOnSeparators === void 0) {\n        extendOnSeparators = false;\n      }\n      let count = 0;\n      for (let pos = 0; pos < to; ++pos) {\n        if (this._value.indexOf(this.thousandsSeparator, pos) === pos) {\n          ++count;\n          if (extendOnSeparators) to += this.thousandsSeparator.length;\n        }\n      }\n      return count;\n    }\n    _separatorsCountFromSlice(slice) {\n      if (slice === void 0) {\n        slice = this._value;\n      }\n      return this._separatorsCount(this._removeThousandsSeparators(slice).length, true);\n    }\n    extractInput(fromPos, toPos, flags) {\n      if (fromPos === void 0) {\n        fromPos = 0;\n      }\n      if (toPos === void 0) {\n        toPos = this.displayValue.length;\n      }\n      [fromPos, toPos] = this._adjustRangeWithSeparators(fromPos, toPos);\n      return this._removeThousandsSeparators(super.extractInput(fromPos, toPos, flags));\n    }\n    _appendCharRaw(ch, flags) {\n      if (flags === void 0) {\n        flags = {};\n      }\n      if (!this.thousandsSeparator) return super._appendCharRaw(ch, flags);\n      const prevBeforeTailValue = flags.tail && flags._beforeTailState ? flags._beforeTailState._value : this._value;\n      const prevBeforeTailSeparatorsCount = this._separatorsCountFromSlice(prevBeforeTailValue);\n      this._value = this._removeThousandsSeparators(this.value);\n      const appendDetails = super._appendCharRaw(ch, flags);\n      this._value = this._insertThousandsSeparators(this._value);\n      const beforeTailValue = flags.tail && flags._beforeTailState ? flags._beforeTailState._value : this._value;\n      const beforeTailSeparatorsCount = this._separatorsCountFromSlice(beforeTailValue);\n      appendDetails.tailShift += (beforeTailSeparatorsCount - prevBeforeTailSeparatorsCount) * this.thousandsSeparator.length;\n      appendDetails.skip = !appendDetails.rawInserted && ch === this.thousandsSeparator;\n      return appendDetails;\n    }\n    _findSeparatorAround(pos) {\n      if (this.thousandsSeparator) {\n        const searchFrom = pos - this.thousandsSeparator.length + 1;\n        const separatorPos = this.value.indexOf(this.thousandsSeparator, searchFrom);\n        if (separatorPos <= pos) return separatorPos;\n      }\n      return -1;\n    }\n    _adjustRangeWithSeparators(from, to) {\n      const separatorAroundFromPos = this._findSeparatorAround(from);\n      if (separatorAroundFromPos >= 0) from = separatorAroundFromPos;\n      const separatorAroundToPos = this._findSeparatorAround(to);\n      if (separatorAroundToPos >= 0) to = separatorAroundToPos + this.thousandsSeparator.length;\n      return [from, to];\n    }\n    remove(fromPos, toPos) {\n      if (fromPos === void 0) {\n        fromPos = 0;\n      }\n      if (toPos === void 0) {\n        toPos = this.displayValue.length;\n      }\n      [fromPos, toPos] = this._adjustRangeWithSeparators(fromPos, toPos);\n      const valueBeforePos = this.value.slice(0, fromPos);\n      const valueAfterPos = this.value.slice(toPos);\n      const prevBeforeTailSeparatorsCount = this._separatorsCount(valueBeforePos.length);\n      this._value = this._insertThousandsSeparators(this._removeThousandsSeparators(valueBeforePos + valueAfterPos));\n      const beforeTailSeparatorsCount = this._separatorsCountFromSlice(valueBeforePos);\n      return new ChangeDetails({\n        tailShift: (beforeTailSeparatorsCount - prevBeforeTailSeparatorsCount) * this.thousandsSeparator.length\n      });\n    }\n    nearestInputPos(cursorPos, direction) {\n      if (!this.thousandsSeparator) return cursorPos;\n      switch (direction) {\n        case DIRECTION.NONE:\n        case DIRECTION.LEFT:\n        case DIRECTION.FORCE_LEFT:\n        {\n          const separatorAtLeftPos = this._findSeparatorAround(cursorPos - 1);\n          if (separatorAtLeftPos >= 0) {\n            const separatorAtLeftEndPos = separatorAtLeftPos + this.thousandsSeparator.length;\n            if (cursorPos < separatorAtLeftEndPos || this.value.length <= separatorAtLeftEndPos || direction === DIRECTION.FORCE_LEFT) {\n              return separatorAtLeftPos;\n            }\n          }\n          break;\n        }\n        case DIRECTION.RIGHT:\n        case DIRECTION.FORCE_RIGHT:\n        {\n          const separatorAtRightPos = this._findSeparatorAround(cursorPos);\n          if (separatorAtRightPos >= 0) {\n            return separatorAtRightPos + this.thousandsSeparator.length;\n          }\n        }\n      }\n      return cursorPos;\n    }\n    doValidate(flags) {\n      // validate as string\n      let valid = Boolean(this._removeThousandsSeparators(this.value).match(this._numberRegExp));\n      if (valid) {\n        // validate as number\n        const number = this.number;\n        valid = valid && !isNaN(number) && (\n          // check min bound for negative values\n          this.min == null || this.min >= 0 || this.min <= this.number) && (\n          // check max bound for positive values\n          this.max == null || this.max <= 0 || this.number <= this.max);\n      }\n      return valid && super.doValidate(flags);\n    }\n    doCommit() {\n      if (this.value) {\n        const number = this.number;\n        let validnum = number;\n\n        // check bounds\n        if (this.min != null) validnum = Math.max(validnum, this.min);\n        if (this.max != null) validnum = Math.min(validnum, this.max);\n        if (validnum !== number) this.unmaskedValue = this.format(validnum, this);\n        let formatted = this.value;\n        if (this.normalizeZeros) formatted = this._normalizeZeros(formatted);\n        if (this.padFractionalZeros && this.scale > 0) formatted = this._padFractionalZeros(formatted);\n        this._value = formatted;\n      }\n      super.doCommit();\n    }\n    _normalizeZeros(value) {\n      const parts = this._removeThousandsSeparators(value).split(this.radix);\n\n      // remove leading zeros\n      parts[0] = parts[0].replace(/^(\\D*)(0*)(\\d*)/, (match, sign, zeros, num) => sign + num);\n      // add leading zero\n      if (value.length && !/\\d$/.test(parts[0])) parts[0] = parts[0] + '0';\n      if (parts.length > 1) {\n        parts[1] = parts[1].replace(/0*$/, ''); // remove trailing zeros\n        if (!parts[1].length) parts.length = 1; // remove fractional\n      }\n\n      return this._insertThousandsSeparators(parts.join(this.radix));\n    }\n    _padFractionalZeros(value) {\n      if (!value) return value;\n      const parts = value.split(this.radix);\n      if (parts.length < 2) parts.push('');\n      parts[1] = parts[1].padEnd(this.scale, '0');\n      return parts.join(this.radix);\n    }\n    doSkipInvalid(ch, flags, checkTail) {\n      if (flags === void 0) {\n        flags = {};\n      }\n      const dropFractional = this.scale === 0 && ch !== this.thousandsSeparator && (ch === this.radix || ch === MaskedNumber.UNMASKED_RADIX || this.mapToRadix.includes(ch));\n      return super.doSkipInvalid(ch, flags, checkTail) && !dropFractional;\n    }\n    get unmaskedValue() {\n      return this._removeThousandsSeparators(this._normalizeZeros(this.value)).replace(this.radix, MaskedNumber.UNMASKED_RADIX);\n    }\n    set unmaskedValue(unmaskedValue) {\n      super.unmaskedValue = unmaskedValue;\n    }\n    get typedValue() {\n      return this.parse(this.unmaskedValue, this);\n    }\n    set typedValue(n) {\n      this.rawInputValue = this.format(n, this).replace(MaskedNumber.UNMASKED_RADIX, this.radix);\n    }\n\n    /** Parsed Number */\n    get number() {\n      return this.typedValue;\n    }\n    set number(number) {\n      this.typedValue = number;\n    }\n\n    /**\n     Is negative allowed\n     */\n    get allowNegative() {\n      return this.min != null && this.min < 0 || this.max != null && this.max < 0;\n    }\n\n    /**\n     Is positive allowed\n     */\n    get allowPositive() {\n      return this.min != null && this.min > 0 || this.max != null && this.max > 0;\n    }\n    typedValueEquals(value) {\n      // handle  0 -> '' case (typed = 0 even if value = '')\n      // for details see https://github.com/uNmAnNeR/imaskjs/issues/134\n      return (super.typedValueEquals(value) || MaskedNumber.EMPTY_VALUES.includes(value) && MaskedNumber.EMPTY_VALUES.includes(this.typedValue)) && !(value === 0 && this.value === '');\n    }\n  }\n  MaskedNumber.UNMASKED_RADIX = '.';\n  MaskedNumber.EMPTY_VALUES = [...Masked.EMPTY_VALUES, 0];\n  MaskedNumber.DEFAULTS = {\n    mask: Number,\n    radix: ',',\n    thousandsSeparator: '',\n    mapToRadix: [MaskedNumber.UNMASKED_RADIX],\n    min: Number.MIN_SAFE_INTEGER,\n    max: Number.MAX_SAFE_INTEGER,\n    scale: 2,\n    normalizeZeros: true,\n    padFractionalZeros: false,\n    parse: Number,\n    format: n => n.toLocaleString('en-US', {\n      useGrouping: false,\n      maximumFractionDigits: 20\n    })\n  };\n  IMask.MaskedNumber = MaskedNumber;\n\n  /** Mask pipe source and destination types */\n  const PIPE_TYPE = {\n    MASKED: 'value',\n    UNMASKED: 'unmaskedValue',\n    TYPED: 'typedValue'\n  };\n  /** Creates new pipe function depending on mask type, source and destination options */\n  function createPipe(arg, from, to) {\n    if (from === void 0) {\n      from = PIPE_TYPE.MASKED;\n    }\n    if (to === void 0) {\n      to = PIPE_TYPE.MASKED;\n    }\n    const masked = createMask(arg);\n    return value => masked.runIsolated(m => {\n      m[from] = value;\n      return m[to];\n    });\n  }\n\n  /** Pipes value through mask depending on mask type, source and destination options */\n  function pipe(value, mask, from, to) {\n    return createPipe(mask, from, to)(value);\n  }\n  IMask.PIPE_TYPE = PIPE_TYPE;\n  IMask.createPipe = createPipe;\n  IMask.pipe = pipe;\n\n  try {\n    globalThis.IMask = IMask;\n  } catch {}\n\n  exports.ChangeDetails = ChangeDetails;\n  exports.ChunksTailDetails = ChunksTailDetails;\n  exports.DIRECTION = DIRECTION;\n  exports.HTMLContenteditableMaskElement = HTMLContenteditableMaskElement;\n  exports.HTMLInputMaskElement = HTMLInputMaskElement;\n  exports.HTMLMaskElement = HTMLMaskElement;\n  exports.InputMask = InputMask;\n  exports.MaskElement = MaskElement;\n  exports.Masked = Masked;\n  exports.MaskedDate = MaskedDate;\n  exports.MaskedDynamic = MaskedDynamic;\n  exports.MaskedEnum = MaskedEnum;\n  exports.MaskedFunction = MaskedFunction;\n  exports.MaskedNumber = MaskedNumber;\n  exports.MaskedPattern = MaskedPattern;\n  exports.MaskedRange = MaskedRange;\n  exports.MaskedRegExp = MaskedRegExp;\n  exports.PIPE_TYPE = PIPE_TYPE;\n  exports.PatternFixedDefinition = PatternFixedDefinition;\n  exports.PatternInputDefinition = PatternInputDefinition;\n  exports.createMask = createMask;\n  exports.createPipe = createPipe;\n  exports.default = IMask;\n  exports.forceDirection = forceDirection;\n  exports.normalizeOpts = normalizeOpts;\n  exports.pipe = pipe;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n//# sourceMappingURL=imask.js.map\n\n/**\n * NOTE: Export for usage\n */\nexport default IMask;"],"names":["global","factory","this","exports","isString","str","isObject","obj","_obj$constructor","pick","keys","_","k","acc","_ref","v","DIRECTION","forceDirection","direction","escapeRegExp","objectIncludes","b","a","arrA","arrB","dateA","dateB","regexpA","regexpB","ActionDetails","opts","IMask","el","maskedClass","mask","normalizeOpts","instanceOpts","_mask","createMask","nOpts","MaskedClass","MaskElement","start","end","HTMLMaskElement","input","_this$input$getRootNo","_this$input$getRootNo2","_this$input","handlers","event","handler","HTMLInputMaskElement","value","HTMLContenteditableMaskElement","root","selection","anchorOffset","focusOffset","range","InputMask","_this$masked","masked","val","ev","listeners","l","pos","newUnmaskedValue","newValue","newDisplayValue","isChanged","restOpts","updateMask","updateOpts","cursorPos","hIndex","e","details","oldRawValue","offset","removeDirection","ChangeDetails","prep","ContinuousTailDetails","from","stop","tail","state","beforePos","shiftChar","Masked","flags","fromPos","toPos","ch","checkTail","consistentState","consistentTail","appended","beforeTailState","tailDetails","ci","d","fn","rawInput","ret","deleteCount","inserted","tailPos","eagerRemove","startChangePos","valLength","tval","ChunksTailDetails","chunks","tailChunk","lastChunk","extendLast","firstTailChunk","chunk","lastBlockIter","chunkBlock","phDetails","remainChars","c","props","cstate","chunkShiftPos","PatternCursor","index","s","_this$block","PatternFixedDefinition","minPos","maxPos","appendEager","isResolved","PatternInputDefinition","parent","isOptional","placeholderChar","displayChar","lazy","eager","maskOpts","boundPos","_flags$_beforeTailSta","MaskedRegExp","MaskedPattern","defs","pattern","unmaskingBlock","optionalBlock","i","p","bNames","bName","expose","blockOpts","maskedBlock","char","isInput","def","_blocks","maskedState","bi","unmaskedValue","_this$_mapPosToBlock","startBlockIndex","blockIter","block","blockDetails","skip","chunkTail","bFromPos","bToPos","blockChunk","blockIndex","stopBefore","si","toBlockIndex","startBlockIter","endBlockIndex","_blocks2","bDetails","accVal","blockStartPos","fromBlockIter","toBlockIter","isSameBlock","fromBlockStartPos","fromBlockEndPos","removeDetails","cursor","total","name","indices","gi","MaskedRange","to","maxLength","autofix","patternOpts","fromStr","toStr","sameCharsCount","minstr","maxstr","placeholder","num","nextVal","MaskedDate","blocks","patternBlocks","bk","date","day","month","year","MaskedDynamic","m","prevValueBeforeTail","inputValue","insertValue","tailValue","prevMask","prevMaskState","_flags$_beforeTailSta2","currentDetails","_this$currentMask","typedValue","_this$currentMask2","_this$currentMask3","_this$currentMask4","compiledMasks","currentMaskRef","currentMask","mi","overwrite","skipInvalid","oldMask","_this$currentMask5","inputs","isCurrent","startInputPos","i1","i2","MaskedEnum","_enum","eopts","lengths","requiredLength","optionalLength","MaskedFunction","MaskedNumber","mid","parts","prepCh","extendOnSeparators","count","slice","prevBeforeTailValue","prevBeforeTailSeparatorsCount","appendDetails","beforeTailValue","beforeTailSeparatorsCount","searchFrom","separatorPos","separatorAroundFromPos","separatorAroundToPos","valueBeforePos","valueAfterPos","separatorAtLeftPos","separatorAtLeftEndPos","separatorAtRightPos","valid","number","validnum","formatted","match","sign","zeros","dropFractional","n","PIPE_TYPE","createPipe","arg","pipe","IMask$1"],"mappings":"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"}